{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \qc \f0 \sa180 \li0 \fi0 \b \fs36 Pandoc User\u8217's Guide\par}
{\pard \qc \f0 \sa180 \li0 \fi0  John MacFarlane\par}
{\pard \qc \f0 \sa180 \li0 \fi0  February 15, 2020\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Synopsis\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\f1 pandoc} [{\i options}] [{\i input-file}]\u8230?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Description\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc is a {\field{\*\fldinst{HYPERLINK "https://www.haskell.org"}}{\fldrslt{\ul
Haskell
}}}
 library for converting from one markup format to another, and a command-line tool that uses this library.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc can convert between numerous markup and word processing formats, including, but not limited to, various flavors of {\field{\*\fldinst{HYPERLINK "https://daringfireball.net/projects/markdown/"}}{\fldrslt{\ul
Markdown
}}}
, {\field{\*\fldinst{HYPERLINK "https://www.w3.org/html/"}}{\fldrslt{\ul
HTML
}}}
, {\field{\*\fldinst{HYPERLINK "https://www.latex-project.org/"}}{\fldrslt{\ul
LaTeX
}}}
 and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Office_Open_XML"}}{\fldrslt{\ul
Word docx
}}}
. For the full lists of input and output formats, see the {\f1 --from} and {\f1 --to} {\field{\*\fldinst{HYPERLINK "#general-options"}}{\fldrslt{\ul
options below
}}}
. Pandoc can also produce {\field{\*\fldinst{HYPERLINK "https://www.adobe.com/pdf/"}}{\fldrslt{\ul
PDF
}}}
 output: see {\field{\*\fldinst{HYPERLINK "#creating-a-pdf"}}{\fldrslt{\ul
creating a PDF
}}}
, below.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc\u8217's enhanced version of Markdown includes syntax for {\field{\*\fldinst{HYPERLINK "#tables"}}{\fldrslt{\ul
tables
}}}
, {\field{\*\fldinst{HYPERLINK "#definition-lists"}}{\fldrslt{\ul
definition lists
}}}
, {\field{\*\fldinst{HYPERLINK "#metadata-blocks"}}{\fldrslt{\ul
metadata blocks
}}}
, {\field{\*\fldinst{HYPERLINK "#footnotes"}}{\fldrslt{\ul
footnotes
}}}
, {\field{\*\fldinst{HYPERLINK "#citations"}}{\fldrslt{\ul
citations
}}}
, {\field{\*\fldinst{HYPERLINK "#math"}}{\fldrslt{\ul
math
}}}
, and much more. See below under {\field{\*\fldinst{HYPERLINK "#pandocs-markdown"}}{\fldrslt{\ul
Pandoc\u8217's Markdown
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc has a modular design: it consists of a set of readers, which parse text in a given format and produce a native representation of the document (an {\i abstract syntax tree} or AST), and a set of writers, which convert this native representation into a target format. Thus, adding an input or output format requires only adding a reader or writer. Users can also run custom {\field{\*\fldinst{HYPERLINK "https://pandoc.org/filters.html"}}{\fldrslt{\ul
pandoc filters
}}}
 to modify the intermediate AST.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Because pandoc\u8217's intermediate representation of a document is less expressive than many of the formats it converts between, one should not expect perfect conversions between every format and every other. Pandoc attempts to preserve the structural elements of a document, but not formatting details such as margin size. And some document elements, such as complex tables, may not fit into pandoc\u8217's simple document model. While conversions from pandoc\u8217's Markdown to all formats aspire to be perfect, conversions from formats more expressive than pandoc\u8217's Markdown can be expected to be lossy.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Using pandoc\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If no {\i input-files} are specified, input is read from {\i stdin}. Output goes to {\i stdout} by default. For output to a file, use the {\f1 -o} option:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -o output.html input.txt\par}
{\pard \ql \f0 \sa180 \li0 \fi0 By default, pandoc produces a document fragment. To produce a standalone document (e.g.\u160?a valid HTML file including {\f1 <head>} and {\f1 <body>}), use the {\f1 -s} or {\f1 --standalone} flag:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -s -o output.html input.txt\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For more information on how standalone documents are produced, see {\field{\*\fldinst{HYPERLINK "#templates"}}{\fldrslt{\ul
Templates
}}}
 below.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If multiple input files are given, {\f1 pandoc} will concatenate them all (with blank lines between them) before parsing. (Use {\f1 --file-scope} to parse files individually.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Specifying formats\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The format of the input and output can be specified explicitly using command-line options. The input format can be specified using the {\f1 -f/--from} option, the output format using the {\f1 -t/--to} option. Thus, to convert {\f1 hello.txt} from Markdown to LaTeX, you could type:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -f markdown -t latex hello.txt\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To convert {\f1 hello.html} from HTML to Markdown:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -f html -t markdown hello.html\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Supported input and output formats are listed below under {\field{\*\fldinst{HYPERLINK "#options"}}{\fldrslt{\ul
Options
}}}
 (see {\f1 -f} for input formats and {\f1 -t} for output formats). You can also use {\f1 pandoc --list-input-formats} and {\f1 pandoc --list-output-formats} to print lists of supported formats.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If the input or output format is not specified explicitly, {\f1 pandoc} will attempt to guess it from the extensions of the filenames. Thus, for example,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -o hello.tex hello.txt\par}
{\pard \ql \f0 \sa180 \li0 \fi0 will convert {\f1 hello.txt} from Markdown to LaTeX. If no output file is specified (so that output goes to {\i stdout}), or if the output file\u8217's extension is unknown, the output format will default to HTML. If no input file is specified (so that input comes from {\i stdin}), or if the input files\u8217' extensions are unknown, the input format will be assumed to be Markdown.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Character encoding\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc uses the UTF-8 character encoding for both input and output. If your local character encoding is not UTF-8, you should pipe input and output through {\field{\*\fldinst{HYPERLINK "https://www.gnu.org/software/libiconv/"}}{\fldrslt{\ul
{\f1 iconv}
}}}
:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 iconv -t utf-8 input.txt | pandoc | iconv -f utf-8\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that in some output formats (such as HTML, LaTeX, ConTeXt, RTF, OPML, DocBook, and Texinfo), information about the character encoding is included in the document header, which will only be included if you use the {\f1 -s/--standalone} option.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Creating a PDF\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To produce a PDF, specify an output file with a {\f1 .pdf} extension:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc test.txt -o test.pdf\par}
{\pard \ql \f0 \sa180 \li0 \fi0 By default, pandoc will use LaTeX to create the PDF, which requires that a LaTeX engine be installed (see {\f1 --pdf-engine} below). Alternatively, pandoc can use ConTeXt, roff ms, or HTML as an intermediate format. To do this, specify an output file with a {\f1 .pdf} extension, as before, but add the {\f1 --pdf-engine} option or {\f1 -t context}, {\f1 -t html}, or {\f1 -t ms} to the command line. The tool used to generate the PDF from the intermediate format may be specified using {\f1 --pdf-engine}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You can control the PDF style using variables, depending on the intermediate format used: see {\field{\*\fldinst{HYPERLINK "#variables-for-latex"}}{\fldrslt{\ul
variables for LaTeX
}}}
, {\field{\*\fldinst{HYPERLINK "#variables-for-context"}}{\fldrslt{\ul
variables for ConTeXt
}}}
, {\field{\*\fldinst{HYPERLINK "#variables-for-wkhtmltopdf"}}{\fldrslt{\ul
variables for {\f1 wkhtmltopdf}
}}}
, {\field{\*\fldinst{HYPERLINK "#variables-for-ms"}}{\fldrslt{\ul
variables for ms
}}}
. When HTML is used as an intermediate format, the output can be styled using {\f1 --css}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To debug the PDF creation, it can be useful to look at the intermediate representation: instead of {\f1 -o test.pdf}, use for example {\f1 -s -o test.tex} to output the generated LaTeX. You can then test it with {\f1 pdflatex test.tex}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When using LaTeX, the following packages need to be available (they are included with all recent versions of {\field{\*\fldinst{HYPERLINK "https://www.tug.org/texlive/"}}{\fldrslt{\ul
TeX Live
}}}
): {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/amsfonts"}}{\fldrslt{\ul
{\f1 amsfonts}
}}}
, {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/amsmath"}}{\fldrslt{\ul
{\f1 amsmath}
}}}
, {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/lm"}}{\fldrslt{\ul
{\f1 lm}
}}}
, {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/unicode-math"}}{\fldrslt{\ul
{\f1 unicode-math}
}}}
, {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/ifxetex"}}{\fldrslt{\ul
{\f1 ifxetex}
}}}
, {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/ifluatex"}}{\fldrslt{\ul
{\f1 ifluatex}
}}}
, {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/listings"}}{\fldrslt{\ul
{\f1 listings}
}}}
 (if the {\f1 --listings} option is used), {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/fancyvrb"}}{\fldrslt{\ul
{\f1 fancyvrb}
}}}
, {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/longtable"}}{\fldrslt{\ul
{\f1 longtable}
}}}
, {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/booktabs"}}{\fldrslt{\ul
{\f1 booktabs}
}}}
, {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/graphicx"}}{\fldrslt{\ul
{\f1 graphicx}
}}}
 (if the document contains images), {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/hyperref"}}{\fldrslt{\ul
{\f1 hyperref}
}}}
, {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/xcolor"}}{\fldrslt{\ul
{\f1 xcolor}
}}}
, {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/ulem"}}{\fldrslt{\ul
{\f1 ulem}
}}}
, {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/geometry"}}{\fldrslt{\ul
{\f1 geometry}
}}}
 (with the {\f1 geometry} variable set), {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/setspace"}}{\fldrslt{\ul
{\f1 setspace}
}}}
 (with {\f1 linestretch}), and {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/babel"}}{\fldrslt{\ul
{\f1 babel}
}}}
 (with {\f1 lang}). The use of {\f1 xelatex} or {\f1 lualatex} as the PDF engine requires {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/fontspec"}}{\fldrslt{\ul
{\f1 fontspec}
}}}
. {\f1 xelatex} uses {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/polyglossia"}}{\fldrslt{\ul
{\f1 polyglossia}
}}}
 (with {\f1 lang}), {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/xecjk"}}{\fldrslt{\ul
{\f1 xecjk}
}}}
, and {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/bidi"}}{\fldrslt{\ul
{\f1 bidi}
}}}
 (with the {\f1 dir} variable set). If the {\f1 mathspec} variable is set, {\f1 xelatex} will use {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/mathspec"}}{\fldrslt{\ul
{\f1 mathspec}
}}}
 instead of {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/unicode-math"}}{\fldrslt{\ul
{\f1 unicode-math}
}}}
. The {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/upquote"}}{\fldrslt{\ul
{\f1 upquote}
}}}
 and {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/microtype"}}{\fldrslt{\ul
{\f1 microtype}
}}}
 packages are used if available, and {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/csquotes"}}{\fldrslt{\ul
{\f1 csquotes}
}}}
 will be used for {\field{\*\fldinst{HYPERLINK "#typography"}}{\fldrslt{\ul
typography
}}}
 if the {\f1 csquotes} variable or metadata field is set to a true value. The {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/natbib"}}{\fldrslt{\ul
{\f1 natbib}
}}}
, {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/biblatex"}}{\fldrslt{\ul
{\f1 biblatex}
}}}
, {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/bibtex"}}{\fldrslt{\ul
{\f1 bibtex}
}}}
, and {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/biber"}}{\fldrslt{\ul
{\f1 biber}
}}}
 packages can optionally be used for {\field{\*\fldinst{HYPERLINK "#citation-rendering"}}{\fldrslt{\ul
citation rendering
}}}
. The following packages will be used to improve output quality if present, but pandoc does not require them to be present: {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/upquote"}}{\fldrslt{\ul
{\f1 upquote}
}}}
 (for straight quotes in verbatim environments), {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/microtype"}}{\fldrslt{\ul
{\f1 microtype}
}}}
 (for better spacing adjustments), {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/parskip"}}{\fldrslt{\ul
{\f1 parskip}
}}}
 (for better inter-paragraph spaces), {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/xurl"}}{\fldrslt{\ul
{\f1 xurl}
}}}
 (for better line breaks in URLs), {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/bookmark"}}{\fldrslt{\ul
{\f1 bookmark}
}}}
 (for better PDF bookmarks), and {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/footnotehyper"}}{\fldrslt{\ul
{\f1 footnotehyper}
}}}
 or {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/footnote"}}{\fldrslt{\ul
{\f1 footnote}
}}}
 (to allow footnotes in tables).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Reading from the Web\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Instead of an input file, an absolute URI may be given. In this case pandoc will fetch the content using HTTP:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -f html -t markdown https://www.fsf.org\par}
{\pard \ql \f0 \sa180 \li0 \fi0 It is possible to supply a custom User-Agent string or other header when requesting a document from a URL:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -f html -t markdown --request-header User-Agent:"Mozilla/5.0" \\\line
  https://www.fsf.org\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Options\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 General options\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -f} {\i FORMAT}, {\f1 -r} {\i FORMAT}, {\f1 --from=}{\i FORMAT}, {\f1 --read=}{\i FORMAT}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify input format. {\i FORMAT} can be:\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 commonmark} ({\field{\*\fldinst{HYPERLINK "https://commonmark.org"}}{\fldrslt{\ul
CommonMark
}}}
 Markdown)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 creole} ({\field{\*\fldinst{HYPERLINK "http://www.wikicreole.org/wiki/Creole1.0"}}{\fldrslt{\ul
Creole 1.0
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 csv} ({\field{\*\fldinst{HYPERLINK "https://tools.ietf.org/html/rfc4180"}}{\fldrslt{\ul
CSV
}}}
 table)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 docbook} ({\field{\*\fldinst{HYPERLINK "https://docbook.org"}}{\fldrslt{\ul
DocBook
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 docx} ({\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Office_Open_XML"}}{\fldrslt{\ul
Word docx
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 dokuwiki} ({\field{\*\fldinst{HYPERLINK "https://www.dokuwiki.org/dokuwiki"}}{\fldrslt{\ul
DokuWiki markup
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 epub} ({\field{\*\fldinst{HYPERLINK "http://idpf.org/epub"}}{\fldrslt{\ul
EPUB
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 fb2} ({\field{\*\fldinst{HYPERLINK "http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1"}}{\fldrslt{\ul
FictionBook2
}}}
 e-book)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 gfm} ({\field{\*\fldinst{HYPERLINK "https://help.github.com/articles/github-flavored-markdown/"}}{\fldrslt{\ul
GitHub-Flavored Markdown
}}}
), or the deprecated and less accurate {\f1 markdown_github}; use {\field{\*\fldinst{HYPERLINK "#markdown-variants"}}{\fldrslt{\ul
{\f1 markdown_github}
}}}
 only if you need extensions not supported in {\field{\*\fldinst{HYPERLINK "#markdown-variants"}}{\fldrslt{\ul
{\f1 gfm}
}}}
.\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 haddock} ({\field{\*\fldinst{HYPERLINK "https://www.haskell.org/haddock/doc/html/ch03s08.html"}}{\fldrslt{\ul
Haddock markup
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 html} ({\field{\*\fldinst{HYPERLINK "https://www.w3.org/html/"}}{\fldrslt{\ul
HTML
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 ipynb} ({\field{\*\fldinst{HYPERLINK "https://nbformat.readthedocs.io/en/latest/"}}{\fldrslt{\ul
Jupyter notebook
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 jats} ({\field{\*\fldinst{HYPERLINK "https://jats.nlm.nih.gov"}}{\fldrslt{\ul
JATS
}}}
 XML)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 jira} ({\field{\*\fldinst{HYPERLINK "https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all"}}{\fldrslt{\ul
Jira
}}}
 wiki markup)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 json} (JSON version of native AST)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 latex} ({\field{\*\fldinst{HYPERLINK "https://www.latex-project.org/"}}{\fldrslt{\ul
LaTeX
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 markdown} ({\field{\*\fldinst{HYPERLINK "#pandocs-markdown"}}{\fldrslt{\ul
Pandoc\u8217's Markdown
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 markdown_mmd} ({\field{\*\fldinst{HYPERLINK "https://fletcherpenney.net/multimarkdown/"}}{\fldrslt{\ul
MultiMarkdown
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 markdown_phpextra} ({\field{\*\fldinst{HYPERLINK "https://michelf.ca/projects/php-markdown/extra/"}}{\fldrslt{\ul
PHP Markdown Extra
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 markdown_strict} (original unextended {\field{\*\fldinst{HYPERLINK "https://daringfireball.net/projects/markdown/"}}{\fldrslt{\ul
Markdown
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 mediawiki} ({\field{\*\fldinst{HYPERLINK "https://www.mediawiki.org/wiki/Help:Formatting"}}{\fldrslt{\ul
MediaWiki markup
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 man} ({\field{\*\fldinst{HYPERLINK "https://man.cx/groff_man(7)"}}{\fldrslt{\ul
roff man
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 muse} ({\field{\*\fldinst{HYPERLINK "https://amusewiki.org/library/manual"}}{\fldrslt{\ul
Muse
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 native} (native Haskell)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 odt} ({\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/OpenDocument"}}{\fldrslt{\ul
ODT
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 opml} ({\field{\*\fldinst{HYPERLINK "http://dev.opml.org/spec2.html"}}{\fldrslt{\ul
OPML
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 org} ({\field{\*\fldinst{HYPERLINK "https://orgmode.org"}}{\fldrslt{\ul
Emacs Org mode
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 rst} ({\field{\*\fldinst{HYPERLINK "https://docutils.sourceforge.io/docs/ref/rst/introduction.html"}}{\fldrslt{\ul
reStructuredText
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 t2t} ({\field{\*\fldinst{HYPERLINK "https://txt2tags.org"}}{\fldrslt{\ul
txt2tags
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 textile} ({\field{\*\fldinst{HYPERLINK "https://www.promptworks.com/textile"}}{\fldrslt{\ul
Textile
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 tikiwiki} ({\field{\*\fldinst{HYPERLINK "https://doc.tiki.org/Wiki-Syntax-Text#The_Markup_Language_Wiki-Syntax"}}{\fldrslt{\ul
TikiWiki markup
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 twiki} ({\field{\*\fldinst{HYPERLINK "https://twiki.org/cgi-bin/view/TWiki/TextFormattingRules"}}{\fldrslt{\ul
TWiki markup
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 vimwiki} ({\field{\*\fldinst{HYPERLINK "https://vimwiki.github.io"}}{\fldrslt{\ul
Vimwiki
}}}
)\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Extensions can be individually enabled or disabled by appending {\f1 +EXTENSION} or {\f1 -EXTENSION} to the format name. See {\field{\*\fldinst{HYPERLINK "#extensions"}}{\fldrslt{\ul
Extensions
}}}
 below, for a list of extensions and their names. See {\f1 --list-input-formats} and {\f1 --list-extensions}, below.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -t} {\i FORMAT}, {\f1 -w} {\i FORMAT}, {\f1 --to=}{\i FORMAT}, {\f1 --write=}{\i FORMAT}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify output format. {\i FORMAT} can be:\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 asciidoc} ({\field{\*\fldinst{HYPERLINK "https://www.methods.co.nz/asciidoc/"}}{\fldrslt{\ul
AsciiDoc
}}}
) or {\f1 asciidoctor} ({\field{\*\fldinst{HYPERLINK "https://asciidoctor.org/"}}{\fldrslt{\ul
AsciiDoctor
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 beamer} ({\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/beamer"}}{\fldrslt{\ul
LaTeX beamer
}}}
 slide show)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 commonmark} ({\field{\*\fldinst{HYPERLINK "https://commonmark.org"}}{\fldrslt{\ul
CommonMark
}}}
 Markdown)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 context} ({\field{\*\fldinst{HYPERLINK "https://www.contextgarden.net/"}}{\fldrslt{\ul
ConTeXt
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 docbook} or {\f1 docbook4} ({\field{\*\fldinst{HYPERLINK "https://docbook.org"}}{\fldrslt{\ul
DocBook
}}}
 4)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 docbook5} (DocBook 5)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 docx} ({\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Office_Open_XML"}}{\fldrslt{\ul
Word docx
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 dokuwiki} ({\field{\*\fldinst{HYPERLINK "https://www.dokuwiki.org/dokuwiki"}}{\fldrslt{\ul
DokuWiki markup
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 epub} or {\f1 epub3} ({\field{\*\fldinst{HYPERLINK "http://idpf.org/epub"}}{\fldrslt{\ul
EPUB
}}}
 v3 book)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 epub2} (EPUB v2)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 fb2} ({\field{\*\fldinst{HYPERLINK "http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1"}}{\fldrslt{\ul
FictionBook2
}}}
 e-book)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 gfm} ({\field{\*\fldinst{HYPERLINK "https://help.github.com/articles/github-flavored-markdown/"}}{\fldrslt{\ul
GitHub-Flavored Markdown
}}}
), or the deprecated and less accurate {\f1 markdown_github}; use {\field{\*\fldinst{HYPERLINK "#markdown-variants"}}{\fldrslt{\ul
{\f1 markdown_github}
}}}
 only if you need extensions not supported in {\field{\*\fldinst{HYPERLINK "#markdown-variants"}}{\fldrslt{\ul
{\f1 gfm}
}}}
.\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 haddock} ({\field{\*\fldinst{HYPERLINK "https://www.haskell.org/haddock/doc/html/ch03s08.html"}}{\fldrslt{\ul
Haddock markup
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 html} or {\f1 html5} ({\field{\*\fldinst{HYPERLINK "https://www.w3.org/html/"}}{\fldrslt{\ul
HTML
}}}
, i.e.\u160?{\field{\*\fldinst{HYPERLINK "https://html.spec.whatwg.org/"}}{\fldrslt{\ul
HTML5
}}}
/XHTML {\field{\*\fldinst{HYPERLINK "https://www.w3.org/TR/html-polyglot/"}}{\fldrslt{\ul
polyglot markup
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 html4} ({\field{\*\fldinst{HYPERLINK "https://www.w3.org/TR/xhtml1/"}}{\fldrslt{\ul
XHTML
}}}
 1.0 Transitional)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 icml} ({\field{\*\fldinst{HYPERLINK "https://wwwimages.adobe.com/www.adobe.com/content/dam/acom/en/devnet/indesign/sdk/cs6/idml/idml-cookbook.pdf"}}{\fldrslt{\ul
InDesign ICML
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 ipynb} ({\field{\*\fldinst{HYPERLINK "https://nbformat.readthedocs.io/en/latest/"}}{\fldrslt{\ul
Jupyter notebook
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 jats_archiving} ({\field{\*\fldinst{HYPERLINK "https://jats.nlm.nih.gov"}}{\fldrslt{\ul
JATS
}}}
 XML, Archiving and Interchange Tag Set)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 jats_articleauthoring} ({\field{\*\fldinst{HYPERLINK "https://jats.nlm.nih.gov"}}{\fldrslt{\ul
JATS
}}}
 XML, Article Authoring Tag Set)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 jats_publishing} ({\field{\*\fldinst{HYPERLINK "https://jats.nlm.nih.gov"}}{\fldrslt{\ul
JATS
}}}
 XML, Journal Publishing Tag Set)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 jats} (alias for {\f1 jats_archiving})\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 jira} ({\field{\*\fldinst{HYPERLINK "https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all"}}{\fldrslt{\ul
Jira
}}}
 wiki markup)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 json} (JSON version of native AST)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 latex} ({\field{\*\fldinst{HYPERLINK "https://www.latex-project.org/"}}{\fldrslt{\ul
LaTeX
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 man} ({\field{\*\fldinst{HYPERLINK "https://man.cx/groff_man(7)"}}{\fldrslt{\ul
roff man
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 markdown} ({\field{\*\fldinst{HYPERLINK "#pandocs-markdown"}}{\fldrslt{\ul
Pandoc\u8217's Markdown
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 markdown_mmd} ({\field{\*\fldinst{HYPERLINK "https://fletcherpenney.net/multimarkdown/"}}{\fldrslt{\ul
MultiMarkdown
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 markdown_phpextra} ({\field{\*\fldinst{HYPERLINK "https://michelf.ca/projects/php-markdown/extra/"}}{\fldrslt{\ul
PHP Markdown Extra
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 markdown_strict} (original unextended {\field{\*\fldinst{HYPERLINK "https://daringfireball.net/projects/markdown/"}}{\fldrslt{\ul
Markdown
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 mediawiki} ({\field{\*\fldinst{HYPERLINK "https://www.mediawiki.org/wiki/Help:Formatting"}}{\fldrslt{\ul
MediaWiki markup
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 ms} ({\field{\*\fldinst{HYPERLINK "https://man.cx/groff_ms(7)"}}{\fldrslt{\ul
roff ms
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 muse} ({\field{\*\fldinst{HYPERLINK "https://amusewiki.org/library/manual"}}{\fldrslt{\ul
Muse
}}}
),\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 native} (native Haskell),\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 odt} ({\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/OpenDocument"}}{\fldrslt{\ul
OpenOffice text document
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 opml} ({\field{\*\fldinst{HYPERLINK "http://dev.opml.org/spec2.html"}}{\fldrslt{\ul
OPML
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 opendocument} ({\field{\*\fldinst{HYPERLINK "http://opendocument.xml.org"}}{\fldrslt{\ul
OpenDocument
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 org} ({\field{\*\fldinst{HYPERLINK "https://orgmode.org"}}{\fldrslt{\ul
Emacs Org mode
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 pdf} ({\field{\*\fldinst{HYPERLINK "https://www.adobe.com/pdf/"}}{\fldrslt{\ul
PDF
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 plain} (plain text),\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 pptx} ({\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Microsoft_PowerPoint"}}{\fldrslt{\ul
PowerPoint
}}}
 slide show)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 rst} ({\field{\*\fldinst{HYPERLINK "https://docutils.sourceforge.io/docs/ref/rst/introduction.html"}}{\fldrslt{\ul
reStructuredText
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 rtf} ({\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Rich_Text_Format"}}{\fldrslt{\ul
Rich Text Format
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 texinfo} ({\field{\*\fldinst{HYPERLINK "https://www.gnu.org/software/texinfo/"}}{\fldrslt{\ul
GNU Texinfo
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 textile} ({\field{\*\fldinst{HYPERLINK "https://www.promptworks.com/textile"}}{\fldrslt{\ul
Textile
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 slideous} ({\field{\*\fldinst{HYPERLINK "https://goessner.net/articles/slideous/"}}{\fldrslt{\ul
Slideous
}}}
 HTML and JavaScript slide show)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 slidy} ({\field{\*\fldinst{HYPERLINK "https://www.w3.org/Talks/Tools/Slidy2/"}}{\fldrslt{\ul
Slidy
}}}
 HTML and JavaScript slide show)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 dzslides} ({\field{\*\fldinst{HYPERLINK "http://paulrouget.com/dzslides/"}}{\fldrslt{\ul
DZSlides
}}}
 HTML5 + JavaScript slide show),\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 revealjs} ({\field{\*\fldinst{HYPERLINK "https://revealjs.com/"}}{\fldrslt{\ul
reveal.js
}}}
 HTML5 + JavaScript slide show)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 s5} ({\field{\*\fldinst{HYPERLINK "https://meyerweb.com/eric/tools/s5/"}}{\fldrslt{\ul
S5
}}}
 HTML and JavaScript slide show)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 tei} ({\field{\*\fldinst{HYPERLINK "https://github.com/TEIC/TEI-Simple"}}{\fldrslt{\ul
TEI Simple
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 xwiki} ({\field{\*\fldinst{HYPERLINK "https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiSyntax/"}}{\fldrslt{\ul
XWiki markup
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 zimwiki} ({\field{\*\fldinst{HYPERLINK "https://zim-wiki.org/manual/Help/Wiki_Syntax.html"}}{\fldrslt{\ul
ZimWiki markup
}}}
)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab the path of a custom Lua writer, see {\field{\*\fldinst{HYPERLINK "#custom-writers"}}{\fldrslt{\ul
Custom writers
}}}
 below\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Note that {\f1 odt}, {\f1 docx}, {\f1 epub}, and {\f1 pdf} output will not be directed to {\i stdout} unless forced with {\f1 -o -}.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Extensions can be individually enabled or disabled by appending {\f1 +EXTENSION} or {\f1 -EXTENSION} to the format name. See {\field{\*\fldinst{HYPERLINK "#extensions"}}{\fldrslt{\ul
Extensions
}}}
 below, for a list of extensions and their names. See {\f1 --list-output-formats} and {\f1 --list-extensions}, below.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -o} {\i FILE}, {\f1 --output=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Write output to {\i FILE} instead of {\i stdout}. If {\i FILE} is {\f1 -}, output will go to {\i stdout}, even if a non-textual format ({\f1 docx}, {\f1 odt}, {\f1 epub2}, {\f1 epub3}) is specified.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --data-dir=}{\i DIRECTORY}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify the user data directory to search for pandoc data files. If this option is not specified, the default user data directory will be used. On *nix and macOS systems this will be the {\f1 pandoc} subdirectory of the XDG data directory (by default, {\f1 $HOME/.local/share}, overridable by setting the {\f1 XDG_DATA_HOME} environment variable). If that directory does not exist, {\f1 $HOME/.pandoc} will be used (for backwards compatibility). In Windows the default user data directory is {\f1 C:\\Users\\USERNAME\\AppData\\Roaming\\pandoc}. You can find the default user data directory on your system by looking at the output of {\f1 pandoc --version}. A {\f1 reference.odt}, {\f1 reference.docx}, {\f1 epub.css}, {\f1 templates}, {\f1 slidy}, {\f1 slideous}, or {\f1 s5} directory placed in this directory will override pandoc\u8217's normal defaults.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -d} {\i FILE}, {\f1 --defaults=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify a set of default option settings. {\i FILE} is a YAML file whose fields correspond to command-line option settings. All options for document conversion, including input and output files, can be set using a defaults file. The file will be searched for first in the working directory, and then in the {\f1 defaults} subdirectory of the user data directory (see {\f1 --data-dir}). The {\f1 .yaml} extension may be omitted. See the section {\field{\*\fldinst{HYPERLINK "#default-files"}}{\fldrslt{\ul
Default files
}}}
 for more information on the file format. Settings from the defaults file may be overridden or extended by subsequent options on the command line.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --bash-completion}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Generate a bash completion script. To enable bash completion with pandoc, add this to your {\f1 .bashrc}:\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 eval "$(pandoc --bash-completion)"\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --verbose}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Give verbose debugging output. Currently this only has an effect with PDF output.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --quiet}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Suppress warning messages.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --fail-if-warnings}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Exit with error status if there are any warnings.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --log=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Write log messages in machine-readable JSON format to {\i FILE}. All messages above DEBUG level will be written, regardless of verbosity settings ({\f1 --verbose}, {\f1 --quiet}).\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --list-input-formats}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 List supported input formats, one per line.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --list-output-formats}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 List supported output formats, one per line.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --list-extensions}[{\f1 =}{\i FORMAT}]\par}
{\pard \ql \f0 \sa180 \li360 \fi0 List supported extensions for {\i FORMAT}, one per line, preceded by a {\f1 +} or {\f1 -} indicating whether it is enabled by default in {\i FORMAT}. If {\i FORMAT} is not specified, defaults for pandoc\u8217's Markdown are given.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --list-highlight-languages}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 List supported languages for syntax highlighting, one per line.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --list-highlight-styles}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 List supported styles for syntax highlighting, one per line. See {\f1 --highlight-style}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -v}, {\f1 --version}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Print version.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -h}, {\f1 --help}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Show usage message.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Reader options\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --shift-heading-level-by=}{\i NUMBER}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Shift heading levels by a positive or negative integer. For example, with {\f1 --shift-heading-level-by=-1}, level 2 headings become level 1 headings, and level 3 headings become level 2 headings. Headings cannot have a level less than 1, so a heading that would be shifted below level 1 becomes a regular paragraph. Exception: with a shift of -N, a level-N heading at the beginning of the document replaces the metadata title. {\f1 --shift-heading-level-by=-1} is a good choice when converting HTML or Markdown documents that use an initial level-1 heading for the document title and level-2+ headings for sections. {\f1 --shift-heading-level-by=1} may be a good choice for converting Markdown documents that use level-1 headings for sections to HTML, since pandoc uses a level-1 heading to render the document title.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --base-header-level=}{\i NUMBER}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 {\i Deprecated. Use {\f1 --shift-heading-level-by}=X instead, where X = NUMBER - 1.} Specify the base level for headings (defaults to 1).\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --strip-empty-paragraphs}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 {\i Deprecated. Use the {\f1 +empty_paragraphs} extension instead.} Ignore paragraphs with no content. This option is useful for converting word processing documents where users have used empty paragraphs to create inter-paragraph space.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --indented-code-classes=}{\i CLASSES}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify classes to use for indented code blocks\u8211-for example, {\f1 perl,numberLines} or {\f1 haskell}. Multiple classes may be separated by spaces or commas.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --default-image-extension=}{\i EXTENSION}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify a default extension to use when image paths/URLs have no extension. This allows you to use the same source for formats that require different kinds of images. Currently this option only affects the Markdown and LaTeX readers.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --file-scope}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Parse each file individually before combining for multifile documents. This will allow footnotes in different files with the same identifiers to work as expected. If this option is set, footnotes and links will not work across files. Reading binary files (docx, odt, epub) implies {\f1 --file-scope}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -F} {\i PROGRAM}, {\f1 --filter=}{\i PROGRAM}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify an executable to be used as a filter transforming the pandoc AST after the input is parsed and before the output is written. The executable should read JSON from stdin and write JSON to stdout. The JSON must be formatted like pandoc\u8217's own JSON input and output. The name of the output format will be passed to the filter as the first argument. Hence,\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 pandoc --filter ./caps.py -t latex\par}
{\pard \ql \f0 \sa180 \li360 \fi0 is equivalent to\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 pandoc -t json | ./caps.py latex | pandoc -f json -t latex\par}
{\pard \ql \f0 \sa180 \li360 \fi0 The latter form may be useful for debugging filters.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Filters may be written in any language. {\f1 Text.Pandoc.JSON} exports {\f1 toJSONFilter} to facilitate writing filters in Haskell. Those who would prefer to write filters in python can use the module {\field{\*\fldinst{HYPERLINK "https://github.com/jgm/pandocfilters"}}{\fldrslt{\ul
{\f1 pandocfilters}
}}}
, installable from PyPI. There are also pandoc filter libraries in {\field{\*\fldinst{HYPERLINK "https://github.com/vinai/pandocfilters-php"}}{\fldrslt{\ul
PHP
}}}
, {\field{\*\fldinst{HYPERLINK "https://metacpan.org/pod/Pandoc::Filter"}}{\fldrslt{\ul
perl
}}}
, and {\field{\*\fldinst{HYPERLINK "https://github.com/mvhenderson/pandoc-filter-node"}}{\fldrslt{\ul
JavaScript/node.js
}}}
.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 In order of preference, pandoc will look for filters in\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 1.\tx360\tab a specified full or relative path (executable or non-executable)\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 2.\tx360\tab {\f1 $DATADIR/filters} (executable or non-executable) where {\f1 $DATADIR} is the user data directory (see {\f1 --data-dir}, above).\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 3.\tx360\tab {\f1 $PATH} (executable only)\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Filters and Lua-filters are applied in the order specified on the command line.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -L} {\i SCRIPT}, {\f1 --lua-filter=}{\i SCRIPT}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Transform the document in a similar fashion as JSON filters (see {\f1 --filter}), but use pandoc\u8217's build-in Lua filtering system. The given Lua script is expected to return a list of Lua filters which will be applied in order. Each Lua filter must contain element-transforming functions indexed by the name of the AST element on which the filter function should be applied.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 The {\f1 pandoc} Lua module provides helper functions for element creation. It is always loaded into the script\u8217's Lua environment.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 The following is an example Lua script for macro-expansion:\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 function expand_hello_world(inline)\line
  if inline.c == '\{\{helloworld\}\}' then\line
    return pandoc.Emph\{ pandoc.Str "Hello, World" \}\line
  else\line
    return inline\line
  end\line
end\line
\line
return \{\{Str = expand_hello_world\}\}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 In order of preference, pandoc will look for Lua filters in\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 1.\tx360\tab a specified full or relative path (executable or non-executable)\par}
{\pard \ql \f0 \sa180 \li720 \fi-360 2.\tx360\tab {\f1 $DATADIR/filters} (executable or non-executable) where {\f1 $DATADIR} is the user data directory (see {\f1 --data-dir}, above).\sa180\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -M} {\i KEY}[{\f1 =}{\i VAL}], {\f1 --metadata=}{\i KEY}[{\f1 :}{\i VAL}]\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Set the metadata field {\i KEY} to the value {\i VAL}. A value specified on the command line overrides a value specified in the document using {\field{\*\fldinst{HYPERLINK "#extension-yaml_metadata_block"}}{\fldrslt{\ul
YAML metadata blocks
}}}
. Values will be parsed as YAML boolean or string values. If no value is specified, the value will be treated as Boolean true. Like {\f1 --variable}, {\f1 --metadata} causes template variables to be set. But unlike {\f1 --variable}, {\f1 --metadata} affects the metadata of the underlying document (which is accessible from filters and may be printed in some output formats) and metadata values will be escaped when inserted into the template.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --metadata-file=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Read metadata from the supplied YAML (or JSON) file. This option can be used with every input format, but string scalars in the YAML file will always be parsed as Markdown. Generally, the input will be handled the same as in {\field{\*\fldinst{HYPERLINK "#extension-yaml_metadata_block"}}{\fldrslt{\ul
YAML metadata blocks
}}}
. This option can be used repeatedly to include multiple metadata files; values in files specified later on the command line will be preferred over those specified in earlier files. Metadata values specified inside the document, or by using {\f1 -M}, overwrite values specified with this option.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -p}, {\f1 --preserve-tabs}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Preserve tabs instead of converting them to spaces. (By default, pandoc converts tabs to spaces before parsing its input.) Note that this will only affect tabs in literal code spans and code blocks. Tabs in regular text are always treated as spaces.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --tab-stop=}{\i NUMBER}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify the number of spaces per tab (default is 4).\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --track-changes=accept}|{\f1 reject}|{\f1 all}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specifies what to do with insertions, deletions, and comments produced by the MS Word \u8220"Track Changes\u8221" feature. {\f1 accept} (the default), inserts all insertions, and ignores all deletions. {\f1 reject} inserts all deletions and ignores insertions. Both {\f1 accept} and {\f1 reject} ignore comments. {\f1 all} puts in insertions, deletions, and comments, wrapped in spans with {\f1 insertion}, {\f1 deletion}, {\f1 comment-start}, and {\f1 comment-end} classes, respectively. The author and time of change is included. {\f1 all} is useful for scripting: only accepting changes from a certain reviewer, say, or before a certain date. If a paragraph is inserted or deleted, {\f1 track-changes=all} produces a span with the class {\f1 paragraph-insertion}/{\f1 paragraph-deletion} before the affected paragraph break. This option only affects the docx reader.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --extract-media=}{\i DIR}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Extract images and other media contained in or linked from the source document to the path {\i DIR}, creating it if necessary, and adjust the images references in the document so they point to the extracted files. If the source format is a binary container (docx, epub, or odt), the media is extracted from the container and the original filenames are used. Otherwise the media is read from the file system or downloaded, and new filenames are constructed based on SHA1 hashes of the contents.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --abbreviations=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specifies a custom abbreviations file, with abbreviations one to a line. If this option is not specified, pandoc will read the data file {\f1 abbreviations} from the user data directory or fall back on a system default. To see the system default, use {\f1 pandoc --print-default-data-file=abbreviations}. The only use pandoc makes of this list is in the Markdown reader. Strings ending in a period that are found in this list will be followed by a nonbreaking space, so that the period will not produce sentence-ending space in formats like LaTeX.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 General writer options\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -s}, {\f1 --standalone}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Produce output with an appropriate header and footer (e.g.\u160?a standalone HTML, LaTeX, TEI, or RTF file, not a fragment). This option is set automatically for {\f1 pdf}, {\f1 epub}, {\f1 epub3}, {\f1 fb2}, {\f1 docx}, and {\f1 odt} output. For {\f1 native} output, this option causes metadata to be included; otherwise, metadata is suppressed.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --template=}{\i FILE}|{\i URL}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use the specified file as a custom template for the generated document. Implies {\f1 --standalone}. See {\field{\*\fldinst{HYPERLINK "#templates"}}{\fldrslt{\ul
Templates
}}}
, below, for a description of template syntax. If no extension is specified, an extension corresponding to the writer will be added, so that {\f1 --template=special} looks for {\f1 special.html} for HTML output. If the template is not found, pandoc will search for it in the {\f1 templates} subdirectory of the user data directory (see {\f1 --data-dir}). If this option is not used, a default template appropriate for the output format will be used (see {\f1 -D/--print-default-template}).\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -V} {\i KEY}[{\f1 =}{\i VAL}], {\f1 --variable=}{\i KEY}[{\f1 :}{\i VAL}]\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Set the template variable {\i KEY} to the value {\i VAL} when rendering the document in standalone mode. If no {\i VAL} is specified, the key will be given the value {\f1 true}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -D} {\i FORMAT}, {\f1 --print-default-template=}{\i FORMAT}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Print the system default template for an output {\i FORMAT}. (See {\f1 -t} for a list of possible {\i FORMAT}s.) Templates in the user data directory are ignored. This option may be used with {\f1 -o}/{\f1 --output} to redirect output to a file, but {\f1 -o}/{\f1 --output} must come before {\f1 --print-default-template} on the command line.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Note that some of the default templates use partials, for example {\f1 styles.html}. To print the partials, use {\f1 --print-default-data-file}: for example, {\f1 --print-default-data-file=templates/styles.html}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --print-default-data-file=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Print a system default data file. Files in the user data directory are ignored. This option may be used with {\f1 -o}/{\f1 --output} to redirect output to a file, but {\f1 -o}/{\f1 --output} must come before {\f1 --print-default-data-file} on the command line.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --eol=crlf}|{\f1 lf}|{\f1 native}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Manually specify line endings: {\f1 crlf} (Windows), {\f1 lf} (macOS/Linux/UNIX), or {\f1 native} (line endings appropriate to the OS on which pandoc is being run). The default is {\f1 native}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --dpi}={\i NUMBER}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify the default dpi (dots per inch) value for conversion from pixels to inch/centimeters and vice versa. (Technically, the correct term would be ppi: pixels per inch.) The default is 96dpi. When images contain information about dpi internally, the encoded value is used instead of the default specified by this option.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --wrap=auto}|{\f1 none}|{\f1 preserve}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Determine how text is wrapped in the output (the source code, not the rendered version). With {\f1 auto} (the default), pandoc will attempt to wrap lines to the column width specified by {\f1 --columns} (default 72). With {\f1 none}, pandoc will not wrap lines at all. With {\f1 preserve}, pandoc will attempt to preserve the wrapping from the source document (that is, where there are nonsemantic newlines in the source, there will be nonsemantic newlines in the output as well). Automatic wrapping does not currently work in HTML output. In {\f1 ipynb} output, this option affects wrapping of the contents of markdown cells.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --columns=}{\i NUMBER}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify length of lines in characters. This affects text wrapping in the generated source code (see {\f1 --wrap}). It also affects calculation of column widths for plain text tables (see {\field{\*\fldinst{HYPERLINK "#tables"}}{\fldrslt{\ul
Tables
}}}
 below).\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --toc}, {\f1 --table-of-contents}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Include an automatically generated table of contents (or, in the case of {\f1 latex}, {\f1 context}, {\f1 docx}, {\f1 odt}, {\f1 opendocument}, {\f1 rst}, or {\f1 ms}, an instruction to create one) in the output document. This option has no effect unless {\f1 -s/--standalone} is used, and it has no effect on {\f1 man}, {\f1 docbook4}, {\f1 docbook5}, or {\f1 jats} output.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Note that if you are producing a PDF via {\f1 ms}, the table of contents will appear at the beginning of the document, before the title. If you would prefer it to be at the end of the document, use the option {\f1 --pdf-engine-opt=--no-toc-relocation}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --toc-depth=}{\i NUMBER}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify the number of section levels to include in the table of contents. The default is 3 (which means that level-1, 2, and 3 headings will be listed in the contents).\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --strip-comments}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Strip out HTML comments in the Markdown or Textile source, rather than passing them on to Markdown, Textile or HTML output as raw HTML. This does not apply to HTML comments inside raw HTML blocks when the {\f1 markdown_in_html_blocks} extension is not set.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --no-highlight}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Disables syntax highlighting for code blocks and inlines, even when a language attribute is given.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --highlight-style=}{\i STYLE}|{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specifies the coloring style to be used in highlighted source code. Options are {\f1 pygments} (the default), {\f1 kate}, {\f1 monochrome}, {\f1 breezeDark}, {\f1 espresso}, {\f1 zenburn}, {\f1 haddock}, and {\f1 tango}. For more information on syntax highlighting in pandoc, see {\field{\*\fldinst{HYPERLINK "#syntax-highlighting"}}{\fldrslt{\ul
Syntax highlighting
}}}
, below. See also {\f1 --list-highlight-styles}.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Instead of a {\i STYLE} name, a JSON file with extension {\f1 .theme} may be supplied. This will be parsed as a KDE syntax highlighting theme and (if valid) used as the highlighting style.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 To generate the JSON version of an existing style, use {\f1 --print-highlight-style}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --print-highlight-style=}{\i STYLE}|{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Prints a JSON version of a highlighting style, which can be modified, saved with a {\f1 .theme} extension, and used with {\f1 --highlight-style}. This option may be used with {\f1 -o}/{\f1 --output} to redirect output to a file, but {\f1 -o}/{\f1 --output} must come before {\f1 --print-highlight-style} on the command line.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --syntax-definition=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Instructs pandoc to load a KDE XML syntax definition file, which will be used for syntax highlighting of appropriately marked code blocks. This can be used to add support for new languages or to use altered syntax definitions for existing languages. This option may be repeated to add multiple syntax definitions.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -H} {\i FILE}, {\f1 --include-in-header=}{\i FILE}|{\i URL}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Include contents of {\i FILE}, verbatim, at the end of the header. This can be used, for example, to include special CSS or JavaScript in HTML documents. This option can be used repeatedly to include multiple files in the header. They will be included in the order specified. Implies {\f1 --standalone}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -B} {\i FILE}, {\f1 --include-before-body=}{\i FILE}|{\i URL}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Include contents of {\i FILE}, verbatim, at the beginning of the document body (e.g.\u160?after the {\f1 <body>} tag in HTML, or the {\f1 \\begin\{document\}} command in LaTeX). This can be used to include navigation bars or banners in HTML documents. This option can be used repeatedly to include multiple files. They will be included in the order specified. Implies {\f1 --standalone}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -A} {\i FILE}, {\f1 --include-after-body=}{\i FILE}|{\i URL}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Include contents of {\i FILE}, verbatim, at the end of the document body (before the {\f1 </body>} tag in HTML, or the {\f1 \\end\{document\}} command in LaTeX). This option can be used repeatedly to include multiple files. They will be included in the order specified. Implies {\f1 --standalone}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --resource-path=}{\i SEARCHPATH}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 List of paths to search for images and other resources. The paths should be separated by {\f1 :} on Linux, UNIX, and macOS systems, and by {\f1 ;} on Windows. If {\f1 --resource-path} is not specified, the default resource path is the working directory. Note that, if {\f1 --resource-path} is specified, the working directory must be explicitly listed or it will not be searched. For example: {\f1 --resource-path=.:test} will search the working directory and the {\f1 test} subdirectory, in that order.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 {\f1 --resource-path} only has an effect if (a) the output format embeds images (for example, {\f1 docx}, {\f1 pdf}, or {\f1 html} with {\f1 --self-contained}) or (b) it is used together with {\f1 --extract-media}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --request-header=}{\i NAME}{\f1 :}{\i VAL}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Set the request header {\i NAME} to the value {\i VAL} when making HTTP requests (for example, when a URL is given on the command line, or when resources used in a document must be downloaded). If you\u8217're behind a proxy, you also need to set the environment variable {\f1 http_proxy} to {\f1 http://...}.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Options affecting specific writers\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --self-contained}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Produce a standalone HTML file with no external dependencies, using {\f1 data:} URIs to incorporate the contents of linked scripts, stylesheets, images, and videos. Implies {\f1 --standalone}. The resulting file should be \u8220"self-contained,\u8221" in the sense that it needs no external files and no net access to be displayed properly by a browser. This option works only with HTML output formats, including {\f1 html4}, {\f1 html5}, {\f1 html+lhs}, {\f1 html5+lhs}, {\f1 s5}, {\f1 slidy}, {\f1 slideous}, {\f1 dzslides}, and {\f1 revealjs}. Scripts, images, and stylesheets at absolute URLs will be downloaded; those at relative URLs will be sought relative to the working directory (if the first source file is local) or relative to the base URL (if the first source file is remote). Elements with the attribute {\f1 data-external="1"} will be left alone; the documents they link to will not be incorporated in the document. Limitation: resources that are loaded dynamically through JavaScript cannot be incorporated; as a result, {\f1 --self-contained} does not work with {\f1 --mathjax}, and some advanced features (e.g.\u160?zoom or speaker notes) may not work in an offline \u8220"self-contained\u8221" {\f1 reveal.js} slide show.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --html-q-tags}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use {\f1 <q>} tags for quotes in HTML.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --ascii}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use only ASCII characters in output. Currently supported for XML and HTML formats (which use entities instead of UTF-8 when this option is selected), CommonMark, gfm, and Markdown (which use entities), roff ms (which use hexadecimal escapes), and to a limited degree LaTeX (which uses standard commands for accented characters when possible). roff man output uses ASCII by default.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --reference-links}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use reference-style links, rather than inline links, in writing Markdown or reStructuredText. By default inline links are used. The placement of link references is affected by the {\f1 --reference-location} option.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --reference-location = block}|{\f1 section}|{\f1 document}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify whether footnotes (and references, if {\f1 reference-links} is set) are placed at the end of the current (top-level) block, the current section, or the document. The default is {\f1 document}. Currently only affects the markdown writer.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --atx-headers}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use ATX-style headings in Markdown output. The default is to use setext-style headings for levels 1 to 2, and then ATX headings. (Note: for {\f1 gfm} output, ATX headings are always used.) This option also affects markdown cells in {\f1 ipynb} output.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --top-level-division=[default|section|chapter|part]}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Treat top-level headings as the given division type in LaTeX, ConTeXt, DocBook, and TEI output. The hierarchy order is part, chapter, then section; all headings are shifted such that the top-level heading becomes the specified type. The default behavior is to determine the best division type via heuristics: unless other conditions apply, {\f1 section} is chosen. When the {\f1 documentclass} variable is set to {\f1 report}, {\f1 book}, or {\f1 memoir} (unless the {\f1 article} option is specified), {\f1 chapter} is implied as the setting for this option. If {\f1 beamer} is the output format, specifying either {\f1 chapter} or {\f1 part} will cause top-level headings to become {\f1 \\part\{..\}}, while second-level headings remain as their default type.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -N}, {\f1 --number-sections}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Number section headings in LaTeX, ConTeXt, HTML, or EPUB output. By default, sections are not numbered. Sections with class {\f1 unnumbered} will never be numbered, even if {\f1 --number-sections} is specified.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --number-offset=}{\i NUMBER}[{\f1 ,}{\i NUMBER}{\f1 ,}{\i \u8230?}]\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Offset for section headings in HTML output (ignored in other output formats). The first number is added to the section number for top-level headings, the second for second-level headings, and so on. So, for example, if you want the first top-level heading in your document to be numbered \u8220"6\u8221", specify {\f1 --number-offset=5}. If your document starts with a level-2 heading which you want to be numbered \u8220"1.5\u8221", specify {\f1 --number-offset=1,4}. Offsets are 0 by default. Implies {\f1 --number-sections}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --listings}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use the {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/listings"}}{\fldrslt{\ul
{\f1 listings}
}}}
 package for LaTeX code blocks. The package does not support multi-byte encoding for source code. To handle UTF-8 you would need to use a custom template. This issue is fully documented here: {\field{\*\fldinst{HYPERLINK "https://en.wikibooks.org/wiki/LaTeX/Source_Code_Listings#Encoding_issue"}}{\fldrslt{\ul
Encoding issue with the listings package
}}}
.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -i}, {\f1 --incremental}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Make list items in slide shows display incrementally (one by one). The default is for lists to be displayed all at once.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --slide-level=}{\i NUMBER}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specifies that headings with the specified level create slides (for {\f1 beamer}, {\f1 s5}, {\f1 slidy}, {\f1 slideous}, {\f1 dzslides}). Headings above this level in the hierarchy are used to divide the slide show into sections; headings below this level create subheads within a slide. Note that content that is not contained under slide-level headings will not appear in the slide show. The default is to set the slide level based on the contents of the document; see {\field{\*\fldinst{HYPERLINK "#structuring-the-slide-show"}}{\fldrslt{\ul
Structuring the slide show
}}}
.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --section-divs}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Wrap sections in {\f1 <section>} tags (or {\f1 <div>} tags for {\f1 html4}), and attach identifiers to the enclosing {\f1 <section>} (or {\f1 <div>}) rather than the heading itself. See {\field{\*\fldinst{HYPERLINK "#heading-identifiers"}}{\fldrslt{\ul
Heading identifiers
}}}
, below.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --email-obfuscation=none}|{\f1 javascript}|{\f1 references}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify a method for obfuscating {\f1 mailto:} links in HTML documents. {\f1 none} leaves {\f1 mailto:} links as they are. {\f1 javascript} obfuscates them using JavaScript. {\f1 references} obfuscates them by printing their letters as decimal or hexadecimal character references. The default is {\f1 none}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --id-prefix=}{\i STRING}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify a prefix to be added to all identifiers and internal links in HTML and DocBook output, and to footnote numbers in Markdown and Haddock output. This is useful for preventing duplicate identifiers when generating fragments to be included in other pages.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -T} {\i STRING}, {\f1 --title-prefix=}{\i STRING}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify {\i STRING} as a prefix at the beginning of the title that appears in the HTML header (but not in the title as it appears at the beginning of the HTML body). Implies {\f1 --standalone}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 -c} {\i URL}, {\f1 --css=}{\i URL}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Link to a CSS style sheet. This option can be used repeatedly to include multiple files. They will be included in the order specified.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 A stylesheet is required for generating EPUB. If none is provided using this option (or the {\f1 css} or {\f1 stylesheet} metadata fields), pandoc will look for a file {\f1 epub.css} in the user data directory (see {\f1 --data-dir}). If it is not found there, sensible defaults will be used.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --reference-doc=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use the specified file as a style reference in producing a docx or ODT file.\par}
{\pard \ql \f0 \sa0 \li360 \fi0 Docx\par}
{\pard \ql \f0 \sa180 \li720 \fi0 For best results, the reference docx should be a modified version of a docx file produced using pandoc. The contents of the reference docx are ignored, but its stylesheets and document properties (including margins, page size, header, and footer) are used in the new docx. If no reference docx is specified on the command line, pandoc will look for a file {\f1 reference.docx} in the user data directory (see {\f1 --data-dir}). If this is not found either, sensible defaults will be used.\par}
{\pard \ql \f0 \sa180 \li720 \fi0 To produce a custom {\f1 reference.docx}, first get a copy of the default {\f1 reference.docx}: {\f1 pandoc -o custom-reference.docx --print-default-data-file reference.docx}. Then open {\f1 custom-reference.docx} in Word, modify the styles as you wish, and save the file. For best results, do not make changes to this file other than modifying the styles used by pandoc:\par}
{\pard \ql \f0 \sa180 \li720 \fi0 Paragraph styles:\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Normal\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Body Text\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab First Paragraph\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Compact\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Title\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Subtitle\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Author\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Date\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Abstract\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Bibliography\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Heading 1\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Heading 2\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Heading 3\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Heading 4\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Heading 5\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Heading 6\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Heading 7\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Heading 8\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Heading 9\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Block Text\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Footnote Text\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Definition Term\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Definition\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Caption\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Table Caption\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Image Caption\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Figure\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Captioned Figure\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab TOC Heading\sa180\par}
{\pard \ql \f0 \sa180 \li720 \fi0 Character styles:\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Default Paragraph Font\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Body Text Char\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Verbatim Char\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Footnote Reference\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Hyperlink\sa180\par}
{\pard \ql \f0 \sa180 \li720 \fi0 Table style:\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab Table\sa180\par}
{\pard \ql \f0 \sa0 \li360 \fi0 ODT\par}
{\pard \ql \f0 \sa180 \li720 \fi0 For best results, the reference ODT should be a modified version of an ODT produced using pandoc. The contents of the reference ODT are ignored, but its stylesheets are used in the new ODT. If no reference ODT is specified on the command line, pandoc will look for a file {\f1 reference.odt} in the user data directory (see {\f1 --data-dir}). If this is not found either, sensible defaults will be used.\par}
{\pard \ql \f0 \sa180 \li720 \fi0 To produce a custom {\f1 reference.odt}, first get a copy of the default {\f1 reference.odt}: {\f1 pandoc -o custom-reference.odt --print-default-data-file reference.odt}. Then open {\f1 custom-reference.odt} in LibreOffice, modify the styles as you wish, and save the file.\par}
{\pard \ql \f0 \sa0 \li360 \fi0 PowerPoint\par}
{\pard \ql \f0 \sa180 \li720 \fi0 Templates included with Microsoft PowerPoint 2013 (either with {\f1 .pptx} or {\f1 .potx} extension) are known to work, as are most templates derived from these.\par}
{\pard \ql \f0 \sa180 \li720 \fi0 The specific requirement is that the template should begin with the following first four layouts:\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 1.\tx360\tab Title Slide\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 2.\tx360\tab Title and Content\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 3.\tx360\tab Section Header\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 4.\tx360\tab Two Content\sa180\par}
{\pard \ql \f0 \sa180 \li720 \fi0 All templates included with a recent version of MS PowerPoint will fit these criteria. (You can click on {\f1 Layout} under the {\f1 Home} menu to check.)\par}
{\pard \ql \f0 \sa180 \li720 \fi0 You can also modify the default {\f1 reference.pptx}: first run {\f1 pandoc -o custom-reference.pptx --print-default-data-file reference.pptx}, and then modify {\f1 custom-reference.pptx} in MS PowerPoint (pandoc will use the first four layout slides, as mentioned above).\sa180\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --epub-cover-image=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use the specified image as the EPUB cover. It is recommended that the image be less than 1000px in width and height. Note that in a Markdown source document you can also specify {\f1 cover-image} in a YAML metadata block (see {\field{\*\fldinst{HYPERLINK "#epub-metadata"}}{\fldrslt{\ul
EPUB Metadata
}}}
, below).\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --epub-metadata=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Look in the specified XML file for metadata for the EPUB. The file should contain a series of {\field{\*\fldinst{HYPERLINK "https://www.dublincore.org/specifications/dublin-core/dces/"}}{\fldrslt{\ul
Dublin Core elements
}}}
. For example:\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1  <dc:rights>Creative Commons</dc:rights>\line
 <dc:language>es-AR</dc:language>\par}
{\pard \ql \f0 \sa180 \li360 \fi0 By default, pandoc will include the following metadata elements: {\f1 <dc:title>} (from the document title), {\f1 <dc:creator>} (from the document authors), {\f1 <dc:date>} (from the document date, which should be in {\field{\*\fldinst{HYPERLINK "https://www.w3.org/TR/NOTE-datetime"}}{\fldrslt{\ul
ISO 8601 format
}}}
), {\f1 <dc:language>} (from the {\f1 lang} variable, or, if is not set, the locale), and {\f1 <dc:identifier id="BookId">} (a randomly generated UUID). Any of these may be overridden by elements in the metadata file.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Note: if the source document is Markdown, a YAML metadata block in the document can be used instead. See below under {\field{\*\fldinst{HYPERLINK "#epub-metadata"}}{\fldrslt{\ul
EPUB Metadata
}}}
.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --epub-embed-font=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Embed the specified font in the EPUB. This option can be repeated to embed multiple fonts. Wildcards can also be used: for example, {\f1 DejaVuSans-*.ttf}. However, if you use wildcards on the command line, be sure to escape them or put the whole filename in single quotes, to prevent them from being interpreted by the shell. To use the embedded fonts, you will need to add declarations like the following to your CSS (see {\f1 --css}):\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 @font-face \{\line
font-family: DejaVuSans;\line
font-style: normal;\line
font-weight: normal;\line
src:url("DejaVuSans-Regular.ttf");\line
\}\line
@font-face \{\line
font-family: DejaVuSans;\line
font-style: normal;\line
font-weight: bold;\line
src:url("DejaVuSans-Bold.ttf");\line
\}\line
@font-face \{\line
font-family: DejaVuSans;\line
font-style: italic;\line
font-weight: normal;\line
src:url("DejaVuSans-Oblique.ttf");\line
\}\line
@font-face \{\line
font-family: DejaVuSans;\line
font-style: italic;\line
font-weight: bold;\line
src:url("DejaVuSans-BoldOblique.ttf");\line
\}\line
body \{ font-family: "DejaVuSans"; \}\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --epub-chapter-level=}{\i NUMBER}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify the heading level at which to split the EPUB into separate \u8220"chapter\u8221" files. The default is to split into chapters at level-1 headings. This option only affects the internal composition of the EPUB, not the way chapters and sections are displayed to users. Some readers may be slow if the chapter files are too large, so for large documents with few level-1 headings, one might want to use a chapter level of 2 or 3.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --epub-subdirectory=}{\i DIRNAME}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Specify the subdirectory in the OCF container that is to hold the EPUB-specific contents. The default is {\f1 EPUB}. To put the EPUB contents in the top level, use an empty string.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --ipynb-output=all|none|best}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Determines how ipynb output cells are treated. {\f1 all} means that all of the data formats included in the original are preserved. {\f1 none} means that the contents of data cells are omitted. {\f1 best} causes pandoc to try to pick the richest data block in each output cell that is compatible with the output format. The default is {\f1 best}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --pdf-engine=}{\i PROGRAM}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use the specified engine when producing PDF output. Valid values are {\f1 pdflatex}, {\f1 lualatex}, {\f1 xelatex}, {\f1 latexmk}, {\f1 tectonic}, {\f1 wkhtmltopdf}, {\f1 weasyprint}, {\f1 prince}, {\f1 context}, and {\f1 pdfroff}. If the engine is not in your PATH, the full path of the engine may be specified here. If this option is not specified, pandoc uses the following defaults depending on the output format specified using {\f1 -t/--to}:\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 -t latex} or none: {\f1 pdflatex} (other options: {\f1 xelatex}, {\f1 lualatex}, {\f1 tectonic}, {\f1 latexmk})\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 -t context}: {\f1 context}\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 -t html}: {\f1 wkhtmltopdf} (other options: {\f1 prince}, {\f1 weasyprint})\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 -t ms}: {\f1 pdfroff}\sa180\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --pdf-engine-opt=}{\i STRING}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use the given string as a command-line argument to the {\f1 pdf-engine}. For example, to use a persistent directory {\f1 foo} for {\f1 latexmk}\u8217's auxiliary files, use {\f1 --pdf-engine-opt=-outdir=foo}. Note that no check for duplicate options is done.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Citation rendering\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --bibliography=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Set the {\f1 bibliography} field in the document\u8217's metadata to {\i FILE}, overriding any value set in the metadata, and process citations using {\f1 pandoc-citeproc}. (This is equivalent to {\f1 --metadata bibliography=FILE --filter pandoc-citeproc}.) If {\f1 --natbib} or {\f1 --biblatex} is also supplied, {\f1 pandoc-citeproc} is not used, making this equivalent to {\f1 --metadata bibliography=FILE}. If you supply this argument multiple times, each {\i FILE} will be added to bibliography.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --csl=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Set the {\f1 csl} field in the document\u8217's metadata to {\i FILE}, overriding any value set in the metadata. (This is equivalent to {\f1 --metadata csl=FILE}.) This option is only relevant with {\f1 pandoc-citeproc}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --citation-abbreviations=}{\i FILE}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Set the {\f1 citation-abbreviations} field in the document\u8217's metadata to {\i FILE}, overriding any value set in the metadata. (This is equivalent to {\f1 --metadata citation-abbreviations=FILE}.) This option is only relevant with {\f1 pandoc-citeproc}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --natbib}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/natbib"}}{\fldrslt{\ul
{\f1 natbib}
}}}
 for citations in LaTeX output. This option is not for use with the {\f1 pandoc-citeproc} filter or with PDF output. It is intended for use in producing a LaTeX file that can be processed with {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/bibtex"}}{\fldrslt{\ul
{\f1 bibtex}
}}}
.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --biblatex}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/biblatex"}}{\fldrslt{\ul
{\f1 biblatex}
}}}
 for citations in LaTeX output. This option is not for use with the {\f1 pandoc-citeproc} filter or with PDF output. It is intended for use in producing a LaTeX file that can be processed with {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/bibtex"}}{\fldrslt{\ul
{\f1 bibtex}
}}}
 or {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/biber"}}{\fldrslt{\ul
{\f1 biber}
}}}
.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Math rendering in HTML\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The default is to render TeX math as far as possible using Unicode characters. Formulas are put inside a {\f1 span} with {\f1 class="math"}, so that they may be styled differently from the surrounding text if needed. However, this gives acceptable results only for basic math, usually you will want to use {\f1 --mathjax} or another of the following options.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --mathjax}[{\f1 =}{\i URL}]\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use {\field{\*\fldinst{HYPERLINK "https://www.mathjax.org"}}{\fldrslt{\ul
MathJax
}}}
 to display embedded TeX math in HTML output. TeX math will be put between {\f1 \\(...\\)} (for inline math) or {\f1 \\[...\\]} (for display math) and wrapped in {\f1 <span>} tags with class {\f1 math}. Then the MathJax JavaScript will render it. The {\i URL} should point to the {\f1 MathJax.js} load script. If a {\i URL} is not provided, a link to the Cloudflare CDN will be inserted.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --mathml}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Convert TeX math to {\field{\*\fldinst{HYPERLINK "https://www.w3.org/Math/"}}{\fldrslt{\ul
MathML
}}}
 (in {\f1 epub3}, {\f1 docbook4}, {\f1 docbook5}, {\f1 jats}, {\f1 html4} and {\f1 html5}). This is the default in {\f1 odt} output. Note that currently only Firefox and Safari (and select e-book readers) natively support MathML.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --webtex}[{\f1 =}{\i URL}]\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Convert TeX formulas to {\f1 <img>} tags that link to an external script that converts formulas to images. The formula will be URL-encoded and concatenated with the URL provided. For SVG images you can for example use {\f1 --webtex https://latex.codecogs.com/svg.latex?}. If no URL is specified, the CodeCogs URL generating PNGs will be used ({\f1 https://latex.codecogs.com/png.latex?}). Note: the {\f1 --webtex} option will affect Markdown output as well as HTML, which is useful if you\u8217're targeting a version of Markdown without native math support.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --katex}[{\f1 =}{\i URL}]\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use {\field{\*\fldinst{HYPERLINK "https://github.com/Khan/KaTeX"}}{\fldrslt{\ul
KaTeX
}}}
 to display embedded TeX math in HTML output. The {\i URL} is the base URL for the KaTeX library. That directory should contain a {\f1 katex.min.js} and a {\f1 katex.min.css} file. If a {\i URL} is not provided, a link to the KaTeX CDN will be inserted.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --gladtex}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Enclose TeX math in {\f1 <eq>} tags in HTML output. The resulting HTML can then be processed by {\field{\*\fldinst{HYPERLINK "https://humenda.github.io/GladTeX/"}}{\fldrslt{\ul
GladTeX
}}}
 to produce images of the typeset formulas and an HTML file with links to these images. So, the procedure is:\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 pandoc -s --gladtex input.md -o myfile.htex\line
gladtex -d myfile-images myfile.htex\line
# produces myfile.html and images in myfile-images\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Options for wrapper scripts\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --dump-args}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Print information about command-line arguments to {\i stdout}, then exit. This option is intended primarily for use in wrapper scripts. The first line of output contains the name of the output file specified with the {\f1 -o} option, or {\f1 -} (for {\i stdout}) if no output file was specified. The remaining lines contain the command-line arguments, one per line, in the order they appear. These do not include regular pandoc options and their arguments, but do include any options appearing after a {\f1 --} separator at the end of the line.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 --ignore-args}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Ignore command-line arguments (for use in wrapper scripts). Regular pandoc options are not ignored. Thus, for example,\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 pandoc --ignore-args -o foo.html -s foo.txt -- -e latin1\par}
{\pard \ql \f0 \sa180 \li360 \fi0 is equivalent to\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 pandoc -o foo.html -s\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Exit codes\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If pandoc completes successfully, it will return exit code 0. Nonzero exit codes have the following meanings:\par}
{
\trowd \trgaph120
\clbrdrb\brdrs\cellx4320\clbrdrb\brdrs\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 Code\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 Error\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 3\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocFailOnWarningError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 4\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocAppError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 5\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocTemplateError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 6\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocOptionError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 21\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocUnknownReaderError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 22\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocUnknownWriterError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 23\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocUnsupportedExtensionError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 31\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocEpubSubdirectoryError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 43\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocPDFError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 47\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocPDFProgramNotFoundError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 61\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocHttpError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 62\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocShouldNeverHappenError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 63\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocSomeError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 64\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocParseError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 65\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocParsecError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 66\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocMakePDFError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 67\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocSyntaxMapError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 83\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocFilterError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 91\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocMacroLoop\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 92\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocUTF8DecodingError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 93\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocIpynbDecodingError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 97\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocCouldNotFindDataFileError\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 99\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 PandocResourceNotFound\par}
\cell}
}
\intbl\row}
{\pard \ql \f0 \sa180 \li0 \fi0 \par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Default files\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The {\f1 --defaults} option may be used to specify a package of options. Here is a sample defaults file demonstrating all of the fields that may be used:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 from: markdown+emoji\line
# reader: may be used instead of from:\line
to: html5\line
# writer: may be used instead of to:\line
\line
# leave blank for output to stdout:\line
output-file:\line
# leave blank for input from stdin, use [] for no input:\line
input-files:\line
- preface.md\line
- content.md\line
# or you may use input-file: with a single value\line
\line
template: letter\line
standalone: true\line
self-contained: false\line
\line
# note that structured variables may be specified:\line
variables:\line
  documentclass: book\line
  classoption:\line
    - twosides\line
    - draft\line
\line
# metadata values specified here are parsed as literal\line
# string text, not markdown:\line
metadata:\line
  author:\line
  - Sam Smith\line
  - Julie Liu\line
metadata-files:\line
- boilerplate.yaml\line
# or you may use metadata-file: with a single value\line
\line
# Note that these take files, not their contents:\line
include-before-body: []\line
include-after-body: []\line
include-in-header: []\line
resource-path: ["."]\line
\line
# filters will be assumed to be Lua filters if they have\line
# the .lua extension, and json filters otherwise.  But\line
# the filter type can also be specified explicitly, as shown:\line
filters:\line
- pandoc-citeproc\line
- wordcount.lua\line
- type: json\line
  path: foo.lua\line
\line
file-scope: false\line
\line
data-dir:\line
\line
# ERROR, WARNING, or INFO\line
verbosity: INFO\line
log-file: log.json\line
\line
# citeproc, natbib, or biblatex\line
cite-method: citeproc\line
# part, chapter, section, or default:\line
top-level-division: chapter\line
abbreviations:\line
\line
pdf-engine: pdflatex\line
pdf-engine-opts:\line
- "-shell-escape"\line
# you may also use pdf-engine-opt: with a single option\line
# pdf-engine-opt: "-shell-escape"\line
\line
# auto, preserve, or none\line
wrap: auto\line
columns: 78\line
dpi: 72\line
\line
extract-media: mediadir\line
\line
table-of-contents: true\line
toc-depth: 2\line
number-sections: false\line
# a list of offsets at each heading level\line
number-offset: [0,0,0,0,0,0]\line
# toc: may also be used instead of table-of-contents:\line
shift-heading-level-by: 1\line
section-divs: true\line
identifier-prefix: foo\line
title-prefix: ""\line
strip-empty-paragraphs: true\line
# lf, crlf, or native\line
eol: lf\line
strip-comments: false\line
indented-code-classes: []\line
ascii: true\line
default-image-extension: ".jpg"\line
\line
# either a style name of a style definition file:\line
highlight-style: pygments\line
syntax-definitions:\line
- c.xml\line
# or you may use syntax-definition: with a single value\line
listings: false\line
\line
reference-doc: myref.docx\line
\line
# method is plain, webtex, gladtex, mathml, mathjax, katex\line
# you may specify a url with webtex, mathjax, katex\line
html-math-method:\line
  method: mathjax\line
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"\line
# none, references, or javascript\line
email-obfuscation: javascript\line
\line
tab-stop: 8\line
preserve-tabs: true\line
\line
incremental: false\line
slide-level: 2\line
\line
epub-subdirectory: EPUB\line
epub-metadata: meta.xml\line
epub-fonts:\line
- foobar.otf\line
epub-chapter-level: 1\line
epub-cover-image: cover.jpg\line
\line
reference-links: true\line
# block, section, or document\line
reference-location: block\line
atx-headers: false\line
\line
# accept, reject, or all\line
track-changes: accept\line
\line
html-q-tags: false\line
css:\line
- site.css\line
\line
# none, all, or best\line
ipynb-output: best\line
\line
# A list of two-element lists\line
request-headers:\line
- ["User-Agent", "Mozilla/5.0"]\line
\line
fail-if-warnings: false\line
dump-args: false\line
ignore-args: false\line
trace: false\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Fields that are omitted will just have their regular default values. So a defaults file can be as simple as one line:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 verbosity: INFO\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Default files can be placed in the {\f1 defaults} subdirectory of the user data directory and used from any directory. For example, one could create a file specifying defaults for writing letters, save it as {\f1 letter.yaml} in the {\f1 defaults} subdirectory of the user data directory, and then invoke these defaults from any directory using {\f1 pandoc --defaults letter} or {\f1 pandoc -dletter}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When multiple defaults are used, their contents will be combined.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that, where command-line arguments may be repeated ({\f1 --metadata-file}, {\f1 --css}, {\f1 --include-in-header}, {\f1 --include-before-body}, {\f1 --include-after-body}, {\f1 --variable}, {\f1 --metadata}, {\f1 --syntax-definition}), the values specified on the command line will combine with values specified in the defaults file, rather than replacing them.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Templates\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When the {\f1 -s/--standalone} option is used, pandoc uses a template to add header and footer material that is needed for a self-standing document. To see the default template that is used, just type\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -D *FORMAT*\par}
{\pard \ql \f0 \sa180 \li0 \fi0 where {\i FORMAT} is the name of the output format. A custom template can be specified using the {\f1 --template} option. You can also override the system default templates for a given output format {\i FORMAT} by putting a file {\f1 templates/default.*FORMAT*} in the user data directory (see {\f1 --data-dir}, above). {\i Exceptions:}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab For {\f1 odt} output, customize the {\f1 default.opendocument} template.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab For {\f1 pdf} output, customize the {\f1 default.latex} template (or the {\f1 default.context} template, if you use {\f1 -t context}, or the {\f1 default.ms} template, if you use {\f1 -t ms}, or the {\f1 default.html} template, if you use {\f1 -t html}).\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\f1 docx} and {\f1 pptx} have no template (however, you can use {\f1 --reference-doc} to customize the output).\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Templates contain {\i variables}, which allow for the inclusion of arbitrary information at any point in the file. They may be set at the command line using the {\f1 -V/--variable} option. If a variable is not set, pandoc will look for the key in the document\u8217's metadata, which can be set using either {\field{\*\fldinst{HYPERLINK "#extension-yaml_metadata_block"}}{\fldrslt{\ul
YAML metadata blocks
}}}
 or with the {\f1 -M/--metadata} option. In addition, some variables are given default values by pandoc. See {\field{\*\fldinst{HYPERLINK "#variables"}}{\fldrslt{\ul
Variables
}}}
 below for a list of variables used in pandoc\u8217's default templates.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you use custom templates, you may need to revise them as pandoc changes. We recommend tracking the changes in the default templates, and modifying your custom templates accordingly. An easy way to do this is to fork the {\field{\*\fldinst{HYPERLINK "https://github.com/jgm/pandoc-templates"}}{\fldrslt{\ul
pandoc-templates
}}}
 repository and merge in changes after each pandoc release.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Template syntax\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Comments\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Anything between the sequence {\f1 $--} and the end of the line will be treated as a comment and omitted from the output.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Delimiters\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To mark variables and control structures in the template, either {\f1 $}\u8230?{\f1 $} or {\f1 $\{}\u8230?{\f1 \}} may be used as delimiters. The styles may also be mixed in the same template, but the opening and closing delimiter must match in each case. The opening delimiter may be followed by one or more spaces or tabs, which will be ignored. The closing delimiter may be followed by one or more spaces or tabs, which will be ignored.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To include a literal {\f1 $} in the document, use {\f1 $$}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Interpolated variables\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A slot for an interpolated variable is a variable name surrounded by matched delimiters. Variable names must begin with a letter and can contain letters, numbers, {\f1 _}, {\f1 -}, and {\f1 .}. The keywords {\f1 it}, {\f1 if}, {\f1 else}, {\f1 endif}, {\f1 for}, {\f1 sep}, and {\f1 endfor} may not be used as variable names. Examples:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $foo$\line
$foo.bar.baz$\line
$foo_bar.baz-bim$\line
$ foo $\line
$\{foo\}\line
$\{foo.bar.baz\}\line
$\{foo_bar.baz-bim\}\line
$\{ foo \}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Variable names with periods are used to get at structured variable values. So, for example, {\f1 employee.salary} will return the value of the {\f1 salary} field of the object that is the value of the {\f1 employee} field.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If the value of the variable is simple value, it will be rendered verbatim. (Note that no escaping is done; the assumption is that the calling program will escape the strings appropriately for the output format.)\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If the value is a list, the values will be concatenated.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If the value is a map, the string {\f1 true} will be rendered.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Every other value will be rendered as the empty string.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Conditionals\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A conditional begins with {\f1 if(variable)} (enclosed in matched delimiters) and ends with {\f1 endif} (enclosed in matched delimiters). It may optionally contain an {\f1 else} (enclosed in matched delimiters). The {\f1 if} section is used if {\f1 variable} has a non-empty value, otherwise the {\f1 else} section is used (if present). Examples:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $if(foo)$bar$endif$\line
\line
$if(foo)$\line
  $foo$\line
$endif$\line
\line
$if(foo)$\line
part one\line
$else$\line
part two\line
$endif$\line
\line
$\{if(foo)\}bar$\{endif\}\line
\line
$\{if(foo)\}\line
  $\{foo\}\line
$\{endif\}\line
\line
$\{if(foo)\}\line
$\{ foo.bar \}\line
$\{else\}\line
no foo!\line
$\{endif\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The keyword {\f1 elseif} may be used to simplify complex nested conditionals:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $if(foo)$\line
XXX\line
$elseif(bar)$\line
YYY\line
$else$\line
ZZZ\line
$endif$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 For loops\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A for loop begins with {\f1 for(variable)} (enclosed in matched delimiters) and ends with {\f1 endfor} (enclosed in matched delimiters.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If {\f1 variable} is an array, the material inside the loop will be evaluated repeatedly, with {\f1 variable} being set to each value of the array in turn, and concatenated.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If {\f1 variable} is a map, the material inside will be set to the map.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If the value of the associated variable is not an array or a map, a single iteration will be performed on its value.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Examples:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $for(foo)$$foo$$sep$, $endfor$\line
\line
$for(foo)$\line
  - $foo.last$, $foo.first$\line
$endfor$\line
\line
$\{ for(foo.bar) \}\line
  - $\{ foo.bar.last \}, $\{ foo.bar.first \}\line
$\{ endfor \}\line
\line
$for(mymap)$\line
$it.name$: $it.office$\line
$endfor$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You may optionally specify a separator between consecutive values using {\f1 sep} (enclosed in matched delimiters). The material between {\f1 sep} and the {\f1 endfor} is the separator.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $\{ for(foo) \}$\{ foo \}$\{ sep \}, $\{ endfor \}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Instead of using {\f1 variable} inside the loop, the special anaphoric keyword {\f1 it} may be used.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $\{ for(foo.bar) \}\line
  - $\{ it.last \}, $\{ it.first \}\line
$\{ endfor \}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Partials\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Partials (subtemplates stored in different files) may be included using the syntax\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $\{ boilerplate() \}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Partials will be sought in the directory containing the main template, and will be assumed to have the same extension as the main template if they lack an explicit extension. (If the partials are not found here, they will also be sought in the {\f1 templates} subdirectory of the user data directory.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Partials may optionally be applied to variables using a colon:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $\{ date:fancy() \}\line
\line
$\{ articles:bibentry() \}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If {\f1 articles} is an array, this will iterate over its values, applying the partial {\f1 bibentry()} to each one. So the second example above is equivalent to\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $\{ for(articles) \}\line
$\{ it:bibentry() \}\line
$\{ endfor \}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that the anaphoric keyword {\f1 it} must be used when iterating over partials. In the above examples, the {\f1 bibentry} partial should contain {\f1 it.title} (and so on) instead of {\f1 articles.title}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Final newlines are omitted from included partials.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Partials may include other partials.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A separator between values of an array may be specified in square brackets, immediately after the variable name or partial:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $\{months[, ]\}$\line
\line
$\{articles:bibentry()[; ]$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The separator in this case is literal and (unlike with {\f1 sep} in an explicit {\f1 for} loop) cannot contain interpolated variables or other template directives.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Nesting\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To ensure that content is \u8220"nested,\u8221" that is, subsequent lines indented, use the {\f1 ^} directive:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $item.number$  $^$$item.description$ ($item.price$)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In this example, if {\f1 item.description} has multiple lines, they will all be indented to line up with the first line:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 00123  A fine bottle of 18-year old\line
       Oban whiskey. ($148)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To nest multiple lines to the same level, align them with the {\f1 ^} directive in the template. For example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $item.number$  $^$$item.description$ ($item.price$)\line
               (Available til $item.sellby$.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 will produce\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 00123  A fine bottle of 18-year old\line
       Oban whiskey. ($148)\line
       (Available til March 30, 2020.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If a variable occurs by itself on a line, preceded by whitespace and not followed by further text or directives on the same line, and the variable\u8217's value contains multiple lines, it will be nested automatically.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Breakable spaces\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Normally, spaces in the template itself (as opposed to values of the interpolated variables) are not breakable, but they can be made breakable in part of the template by using the {\f1 ~} keyword (ended with another {\f1 ~}).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $~$This long line may break if the document is rendered\line
with a short line length.$~$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Pipes\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A pipe transforms the value of a variable or partial. Pipes are specified using a slash ({\f1 /}) between the variable name (or partial) and the pipe name. Example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $for(name)$\line
$name/uppercase$\line
$endfor$\line
\line
$for(metadata/pairs)$\line
- $it.key$: $it.value$\line
$endfor$\line
\line
$employee:name()/uppercase$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pipes may be chained:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $for(employees/pairs)$\line
$it.key/alpha/uppercase$. $it.name$\line
$endfor$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Some pipes take parameters:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 |----------------------|------------|\line
$for(employee)$\line
$it.name.first/uppercase/left 20 "| "$$it.name.salary/right 10 " | " " |"$\line
$endfor$\line
|----------------------|------------|\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Currently the following pipes are predefined:\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\f1 pairs}: Converts a map or array to an array of maps, each with {\f1 key} and {\f1 value} fields. If the original value was an array, the {\f1 key} will be the array index, starting with 1.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\f1 uppercase}: Converts text to uppercase.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\f1 lowercase}: Converts text to lowercase.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\f1 length}: Returns the length of the value: number of characters for a textual value, number of elements for a map or array.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\f1 reverse}: Reverses a textual value or array, and has no effect on other values.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\f1 chomp}: Removes trailing newlines (and breakable space).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\f1 nowrap}: Disables line wrapping on breakable spaces.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\f1 alpha}: Converts textual values that can be read as an integer into lowercase alphabetic characters {\f1 a..z} (mod 26). This can be used to get lettered enumeration from array indices. To get uppercase letters, chain with {\f1 uppercase}.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\f1 roman}: Converts textual values that can be read as an integer into lowercase roman numerials. This can be used to get lettered enumeration from array indices. To get uppercase roman, chain with {\f1 uppercase}.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\f1 left n "leftborder" "rightborder"}: Renders a textual value in a block of width {\f1 n}, aligned to the left, with an optional left and right border. Has no effect on other values. This can be used to align material in tables. Widths are positive integers indicating the number of characters. Borders are strings inside double quotes; literal {\f1 "} and {\f1 \\} characters must be backslash-escaped.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\f1 right n "leftborder" "rightborder"}: Renders a textual value in a block of width {\f1 n}, aligned to the right, and has no effect on other values.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\f1 center n "leftborder" "rightborder"}: Renders a textual value in a block of width {\f1 n}, aligned to the center, and has no effect on other values.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Variables\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Metadata variables\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 title}, {\f1 author}, {\f1 date}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 allow identification of basic aspects of the document. Included in PDF metadata through LaTeX and ConTeXt. These can be set through a {\field{\*\fldinst{HYPERLINK "#extension-pandoc_title_block"}}{\fldrslt{\ul
pandoc title block
}}}
, which allows for multiple authors, or through a {\field{\*\fldinst{HYPERLINK "#extension-yaml_metadata_block"}}{\fldrslt{\ul
YAML metadata block
}}}
:\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 ---\line
author:\line
- Aristotle\line
- Peter Abelard\line
...\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Note that if you just want to set PDF or HTML metadata, without including a title block in the document itself, you can set the {\f1 title-meta}, {\f1 author-meta}, and {\f1 date-meta} variables. (By default these are set automatically, based on {\f1 title}, {\f1 author}, and {\f1 date}.)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 subtitle}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 document subtitle, included in HTML, EPUB, LaTeX, ConTeXt, and docx documents\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 abstract}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 document summary, included in LaTeX, ConTeXt, AsciiDoc, and docx documents\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 keywords}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 list of keywords to be included in HTML, PDF, ODT, pptx, docx and AsciiDoc metadata; repeat as for {\f1 author}, above\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 subject}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 document subject, included in ODT, PDF, docx and pptx metadata\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 description}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 document description, included in ODT, docx and pptx metadata. Some applications show this as {\f1 Comments} metadata.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 category}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 document category, included in docx and pptx metadata\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Additionally, any root-level string metadata, not included in ODT, docx or pptx metadata is added as a {\i custom property}. The following {\field{\*\fldinst{HYPERLINK "https://yaml.org/spec/1.2/spec.html"}}{\fldrslt{\ul
YAML
}}}
 metadata block for instance:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ---\line
title:  'This is the title'\line
subtitle: "This is the subtitle"\line
author:\line
- Author One\line
- Author Two\line
description: |\line
    This is a long\line
    description.\line
\line
    It consists of two paragraphs\line
...\par}
{\pard \ql \f0 \sa180 \li0 \fi0 will include {\f1 title}, {\f1 author} and {\f1 description} as standard document properties and {\f1 subtitle} as a custom property when converting to docx, ODT or pptx.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Language variables\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 lang}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 identifies the main language of the document using IETF language tags (following the {\field{\*\fldinst{HYPERLINK "https://tools.ietf.org/html/bcp47"}}{\fldrslt{\ul
BCP 47
}}}
 standard), such as {\f1 en} or {\f1 en-GB}. The {\field{\*\fldinst{HYPERLINK "https://r12a.github.io/app-subtags/"}}{\fldrslt{\ul
Language subtag lookup
}}}
 tool can look up or verify these tags. This affects most formats, and controls hyphenation in PDF output when using LaTeX (through {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/babel"}}{\fldrslt{\ul
{\f1 babel}
}}}
 and {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/polyglossia"}}{\fldrslt{\ul
{\f1 polyglossia}
}}}
) or ConTeXt.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Use native pandoc {\field{\*\fldinst{HYPERLINK "#divs-and-spans"}}{\fldrslt{\ul
Divs and Spans
}}}
 with the {\f1 lang} attribute to switch the language:\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 ---\line
lang: en-GB\line
...\line
\line
Text in the main document language (British English).\line
\line
::: \{lang=fr-CA\}\line
> Cette citation est \u233?crite en fran\u231?ais canadien.\line
:::\line
\line
More text in English. ['Zitat auf Deutsch.']\{lang=de\}\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 dir}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 the base script direction, either {\f1 rtl} (right-to-left) or {\f1 ltr} (left-to-right).\par}
{\pard \ql \f0 \sa180 \li360 \fi0 For bidirectional documents, native pandoc {\f1 span}s and {\f1 div}s with the {\f1 dir} attribute (value {\f1 rtl} or {\f1 ltr}) can be used to override the base direction in some output formats. This may not always be necessary if the final renderer (e.g.\u160?the browser, when generating HTML) supports the {\field{\*\fldinst{HYPERLINK "https://www.w3.org/International/articles/inline-bidi-markup/uba-basics"}}{\fldrslt{\ul
Unicode Bidirectional Algorithm
}}}
.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 When using LaTeX for bidirectional documents, only the {\f1 xelatex} engine is fully supported (use {\f1 --pdf-engine=xelatex}).\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Variables for HTML math\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 classoption}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 when using {\field{\*\fldinst{HYPERLINK "#option--katex"}}{\fldrslt{\ul
KaTeX
}}}
, you can render display math equations flush left using {\field{\*\fldinst{HYPERLINK "#layout"}}{\fldrslt{\ul
YAML metadata
}}}
 or with {\f1 -M classoption=fleqn}.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Variables for HTML slides\par}
{\pard \ql \f0 \sa180 \li0 \fi0 These affect HTML output when {\field{\*\fldinst{HYPERLINK "#producing-slide-shows-with-pandoc"}}{\fldrslt{\ul
producing slide shows with pandoc
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 All {\field{\*\fldinst{HYPERLINK "https://github.com/hakimel/reveal.js#configuration"}}{\fldrslt{\ul
reveal.js configuration options
}}}
 are available as variables. To turn off boolean flags that default to true in reveal.js, use {\f1 0}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 revealjs-url}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 base URL for reveal.js documents (defaults to {\f1 reveal.js})\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 s5-url}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 base URL for S5 documents (defaults to {\f1 s5/default})\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 slidy-url}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 base URL for Slidy documents (defaults to {\f1 https://www.w3.org/Talks/Tools/Slidy2})\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 slideous-url}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 base URL for Slideous documents (defaults to {\f1 slideous})\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 title-slide-attributes}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 additional attributes for the title slide of reveal.js slide shows. See {\field{\*\fldinst{HYPERLINK "#background-in-reveal.js-and-beamer"}}{\fldrslt{\ul
background in reveal.js and beamer
}}}
 for an example.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Variables for Beamer slides\par}
{\pard \ql \f0 \sa180 \li0 \fi0 These variables change the appearance of PDF slides using {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/beamer"}}{\fldrslt{\ul
{\f1 beamer}
}}}
.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 aspectratio}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 slide aspect ratio ({\f1 43} for 4:3 [default], {\f1 169} for 16:9, {\f1 1610} for 16:10, {\f1 149} for 14:9, {\f1 141} for 1.41:1, {\f1 54} for 5:4, {\f1 32} for 3:2)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 beamerarticle}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 produce an article from Beamer slides\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 beameroption}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 add extra beamer option with {\f1 \\setbeameroption\{\}}\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 institute}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 author affiliations: can be a list when there are multiple authors\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 logo}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 logo image for slides\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 navigation}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 controls navigation symbols (default is {\f1 empty} for no navigation symbols; other valid values are {\f1 frame}, {\f1 vertical}, and {\f1 horizontal})\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 section-titles}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 enables \u8220"title pages\u8221" for new sections (default is true)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 theme}, {\f1 colortheme}, {\f1 fonttheme}, {\f1 innertheme}, {\f1 outertheme}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 beamer themes\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 themeoptions}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 options for LaTeX beamer themes (a list).\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 titlegraphic}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 image for title slide\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Variables for PowerPoint\par}
{\pard \ql \f0 \sa180 \li0 \fi0 These variables control the visual aspects of a slide show that are not easily controlled via templates.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 monofont}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 font to use for code.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Variables for LaTeX\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc uses these variables when {\field{\*\fldinst{HYPERLINK "#creating-a-pdf"}}{\fldrslt{\ul
creating a PDF
}}}
 with a LaTeX engine.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Layout\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 block-headings}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 make {\f1 \\paragraph} and {\f1 \\subparagraph} (fourth- and fifth-level headings, or fifth- and sixth-level with book classes) free-standing rather than run-in; requires further formatting to distinguish from {\f1 \\subsubsection} (third- or fourth-level headings). Instead of using this option, {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/koma-script"}}{\fldrslt{\ul
KOMA-Script
}}}
 can adjust headings more extensively:\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 ---\line
documentclass: scrartcl\line
header-includes: |\line
  \\RedeclareSectionCommand[\line
    beforeskip=-10pt plus -2pt minus -1pt,\line
    afterskip=1sp plus -1sp minus 1sp,\line
    font=\\normalfont\\itshape]\{paragraph\}\line
  \\RedeclareSectionCommand[\line
    beforeskip=-10pt plus -2pt minus -1pt,\line
    afterskip=1sp plus -1sp minus 1sp,\line
    font=\\normalfont\\scshape,\line
    indent=0pt]\{subparagraph\}\line
...\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 classoption}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 option for document class, e.g.\u160?{\f1 oneside}; repeat for multiple options:\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 ---\line
classoption:\line
- twocolumn\line
- landscape\line
...\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 documentclass}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 document class: usually one of the standard classes, {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/article"}}{\fldrslt{\ul
{\f1 article}
}}}
, {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/book"}}{\fldrslt{\ul
{\f1 book}
}}}
, and {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/report"}}{\fldrslt{\ul
{\f1 report}
}}}
; the {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/koma-script"}}{\fldrslt{\ul
KOMA-Script
}}}
 equivalents, {\f1 scrartcl}, {\f1 scrbook}, and {\f1 scrreprt}, which default to smaller margins; or {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/memoir"}}{\fldrslt{\ul
{\f1 memoir}
}}}
\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 geometry}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 option for {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/geometry"}}{\fldrslt{\ul
{\f1 geometry}
}}}
 package, e.g.\u160?{\f1 margin=1in}; repeat for multiple options:\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 ---\line
geometry:\line
- top=30mm\line
- left=20mm\line
- heightrounded\line
...\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 hyperrefoptions}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 option for {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/hyperref"}}{\fldrslt{\ul
{\f1 hyperref}
}}}
 package, e.g.\u160?{\f1 linktoc=all}; repeat for multiple options:\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 ---\line
hyperrefoptions:\line
- linktoc=all\line
- pdfwindowui\line
- pdfpagemode=FullScreen\line
...\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 indent}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 uses document class settings for indentation (the default LaTeX template otherwise removes indentation and adds space between paragraphs)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 linestretch}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 adjusts line spacing using the {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/setspace"}}{\fldrslt{\ul
{\f1 setspace}
}}}
 package, e.g.\u160?{\f1 1.25}, {\f1 1.5}\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 margin-left}, {\f1 margin-right}, {\f1 margin-top}, {\f1 margin-bottom}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 sets margins if {\f1 geometry} is not used (otherwise {\f1 geometry} overrides these)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 pagestyle}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 control {\f1 \\pagestyle\{\}}: the default article class supports {\f1 plain} (default), {\f1 empty} (no running heads or page numbers), and {\f1 headings} (section titles in running heads)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 papersize}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 paper size, e.g.\u160?{\f1 letter}, {\f1 a4}\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 secnumdepth}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 numbering depth for sections (with {\f1 --number-sections} option or {\f1 numbersections} variable)\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Fonts\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 fontenc}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 allows font encoding to be specified through {\f1 fontenc} package (with {\f1 pdflatex}); default is {\f1 T1} (see {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/encguide"}}{\fldrslt{\ul
LaTeX font encodings guide
}}}
)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 fontfamily}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 font package for use with {\f1 pdflatex}: {\field{\*\fldinst{HYPERLINK "https://www.tug.org/texlive/"}}{\fldrslt{\ul
TeX Live
}}}
 includes many options, documented in the {\field{\*\fldinst{HYPERLINK "https://tug.org/FontCatalogue/"}}{\fldrslt{\ul
LaTeX Font Catalogue
}}}
. The default is {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/lm"}}{\fldrslt{\ul
Latin Modern
}}}
.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 fontfamilyoptions}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 options for package used as {\f1 fontfamily}; repeat for multiple options. For example, to use the Libertine font with proportional lowercase (old-style) figures through the {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/libertinus"}}{\fldrslt{\ul
{\f1 libertinus}
}}}
 package:\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 ---\line
fontfamily: libertinus\line
fontfamilyoptions:\line
- osf\line
- p\line
...\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 fontsize}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 font size for body text. The standard classes allow 10pt, 11pt, and 12pt. To use another size, set {\f1 documentclass} to one of the {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/koma-script"}}{\fldrslt{\ul
KOMA-Script
}}}
 classes, such as {\f1 scrartcl} or {\f1 scrbook}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 mainfont}, {\f1 sansfont}, {\f1 monofont}, {\f1 mathfont}, {\f1 CJKmainfont}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 font families for use with {\f1 xelatex} or {\f1 lualatex}: take the name of any system font, using the {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/fontspec"}}{\fldrslt{\ul
{\f1 fontspec}
}}}
 package. {\f1 CJKmainfont} uses the {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/xecjk"}}{\fldrslt{\ul
{\f1 xecjk}
}}}
 package.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 mainfontoptions}, {\f1 sansfontoptions}, {\f1 monofontoptions}, {\f1 mathfontoptions}, {\f1 CJKoptions}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 options to use with {\f1 mainfont}, {\f1 sansfont}, {\f1 monofont}, {\f1 mathfont}, {\f1 CJKmainfont} in {\f1 xelatex} and {\f1 lualatex}. Allow for any choices available through {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/fontspec"}}{\fldrslt{\ul
{\f1 fontspec}
}}}
; repeat for multiple options. For example, to use the {\field{\*\fldinst{HYPERLINK "http://www.gust.org.pl/projects/e-foundry/tex-gyre"}}{\fldrslt{\ul
TeX Gyre
}}}
 version of Palatino with lowercase figures:\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 ---\line
mainfont: TeX Gyre Pagella\line
mainfontoptions:\line
- Numbers=Lowercase\line
- Numbers=Proportional\line
...\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 microtypeoptions}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 options to pass to the microtype package\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Links\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 colorlinks}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 add color to link text; automatically enabled if any of {\f1 linkcolor}, {\f1 filecolor}, {\f1 citecolor}, {\f1 urlcolor}, or {\f1 toccolor} are set\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 linkcolor}, {\f1 filecolor}, {\f1 citecolor}, {\f1 urlcolor}, {\f1 toccolor}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 color for internal links, external links, citation links, linked URLs, and links in table of contents, respectively: uses options allowed by {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/xcolor"}}{\fldrslt{\ul
{\f1 xcolor}
}}}
, including the {\f1 dvipsnames}, {\f1 svgnames}, and {\f1 x11names} lists\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 links-as-notes}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 causes links to be printed as footnotes\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Front matter\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 lof}, {\f1 lot}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 include list of figures, list of tables\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 thanks}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 contents of acknowledgments footnote after document title\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 toc}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 include table of contents (can also be set using {\f1 --toc/--table-of-contents})\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 toc-depth}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 level of section to include in table of contents\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 BibLaTeX Bibliographies\par}
{\pard \ql \f0 \sa180 \li0 \fi0 These variables function when using BibLaTeX for {\field{\*\fldinst{HYPERLINK "#citation-rendering"}}{\fldrslt{\ul
citation rendering
}}}
.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 biblatexoptions}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 list of options for biblatex\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 biblio-style}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 bibliography style, when used with {\f1 --natbib} and {\f1 --biblatex}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 biblio-title}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 bibliography title, when used with {\f1 --natbib} and {\f1 --biblatex}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 bibliography}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 bibliography to use for resolving references\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 natbiboptions}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 list of options for natbib\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Variables for ConTeXt\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc uses these variables when {\field{\*\fldinst{HYPERLINK "#creating-a-pdf"}}{\fldrslt{\ul
creating a PDF
}}}
 with ConTeXt.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 fontsize}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 font size for body text (e.g.\u160?{\f1 10pt}, {\f1 12pt})\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 headertext}, {\f1 footertext}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 text to be placed in running header or footer (see {\field{\*\fldinst{HYPERLINK "https://wiki.contextgarden.net/Headers_and_Footers"}}{\fldrslt{\ul
ConTeXt Headers and Footers
}}}
); repeat up to four times for different placement\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 indenting}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 controls indentation of paragraphs, e.g.\u160?{\f1 yes,small,next} (see {\field{\*\fldinst{HYPERLINK "https://wiki.contextgarden.net/Indentation"}}{\fldrslt{\ul
ConTeXt Indentation
}}}
); repeat for multiple options\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 interlinespace}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 adjusts line spacing, e.g.\u160?{\f1 4ex} (using {\field{\*\fldinst{HYPERLINK "https://wiki.contextgarden.net/Command/setupinterlinespace"}}{\fldrslt{\ul
{\f1 setupinterlinespace}
}}}
); repeat for multiple options\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 layout}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 options for page margins and text arrangement (see {\field{\*\fldinst{HYPERLINK "https://wiki.contextgarden.net/Layout"}}{\fldrslt{\ul
ConTeXt Layout
}}}
); repeat for multiple options\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 linkcolor}, {\f1 contrastcolor}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 color for links outside and inside a page, e.g.\u160?{\f1 red}, {\f1 blue} (see {\field{\*\fldinst{HYPERLINK "https://wiki.contextgarden.net/Color"}}{\fldrslt{\ul
ConTeXt Color
}}}
)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 linkstyle}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 typeface style for links, e.g.\u160?{\f1 normal}, {\f1 bold}, {\f1 slanted}, {\f1 boldslanted}, {\f1 type}, {\f1 cap}, {\f1 small}\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 lof}, {\f1 lot}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 include list of figures, list of tables\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 mainfont}, {\f1 sansfont}, {\f1 monofont}, {\f1 mathfont}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 font families: take the name of any system font (see {\field{\*\fldinst{HYPERLINK "https://wiki.contextgarden.net/Font_Switching"}}{\fldrslt{\ul
ConTeXt Font Switching
}}}
)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 margin-left}, {\f1 margin-right}, {\f1 margin-top}, {\f1 margin-bottom}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 sets margins, if {\f1 layout} is not used (otherwise {\f1 layout} overrides these)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 pagenumbering}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 page number style and location (using {\field{\*\fldinst{HYPERLINK "https://wiki.contextgarden.net/Command/setuppagenumbering"}}{\fldrslt{\ul
{\f1 setuppagenumbering}
}}}
); repeat for multiple options\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 papersize}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 paper size, e.g.\u160?{\f1 letter}, {\f1 A4}, {\f1 landscape} (see {\field{\*\fldinst{HYPERLINK "https://wiki.contextgarden.net/PaperSetup"}}{\fldrslt{\ul
ConTeXt Paper Setup
}}}
); repeat for multiple options\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 pdfa}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 adds to the preamble the setup necessary to generate PDF/A of the type specified, e.g.\u160?{\f1 1a:2005}, {\f1 2a}. If no type is specified (i.e.\u160?the value is set to True, by e.g.\u160?{\f1 --metadata=pdfa} or {\f1 pdfa: true} in a YAML metadata block), {\f1 1b:2005} will be used as default, for reasons of backwards compatibility. Using {\f1 --variable=pdfa} without specified value is not supported. To successfully generate PDF/A the required ICC color profiles have to be available and the content and all included files (such as images) have to be standard conforming. The ICC profiles and output intent may be specified using the variables {\f1 pdfaiccprofile} and {\f1 pdfaintent}. See also {\field{\*\fldinst{HYPERLINK "https://wiki.contextgarden.net/PDF/A"}}{\fldrslt{\ul
ConTeXt PDFA
}}}
 for more details.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 pdfaiccprofile}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 when used in conjunction with {\f1 pdfa}, specifies the ICC profile to use in the PDF, e.g.\u160?{\f1 default.cmyk}. If left unspecified, {\f1 sRGB.icc} is used as default. May be repeated to include multiple profiles. Note that the profiles have to be available on the system. They can be obtained from {\field{\*\fldinst{HYPERLINK "https://wiki.contextgarden.net/PDFX#ICC_profiles"}}{\fldrslt{\ul
ConTeXt ICC Profiles
}}}
.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 pdfaintent}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 when used in conjunction with {\f1 pdfa}, specifies the output intent for the colors, e.g.\u160?{\f1 ISO coated v2 300\\letterpercent\\space (ECI)} If left unspecified, {\f1 sRGB IEC61966-2.1} is used as default.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 toc}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 include table of contents (can also be set using {\f1 --toc/--table-of-contents})\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 whitespace}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 spacing between paragraphs, e.g.\u160?{\f1 none}, {\f1 small} (using {\field{\*\fldinst{HYPERLINK "https://wiki.contextgarden.net/Command/setupwhitespace"}}{\fldrslt{\ul
{\f1 setupwhitespace}
}}}
)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 includesource}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 include all source documents as file attachments in the PDF file\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Variables for {\f1 wkhtmltopdf}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc uses these variables when {\field{\*\fldinst{HYPERLINK "#creating-a-pdf"}}{\fldrslt{\ul
creating a PDF
}}}
 with {\field{\*\fldinst{HYPERLINK "https://wkhtmltopdf.org"}}{\fldrslt{\ul
{\f1 wkhtmltopdf}
}}}
. The {\f1 --css} option also affects the output.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 footer-html}, {\f1 header-html}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 add information to the header and footer\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 margin-left}, {\f1 margin-right}, {\f1 margin-top}, {\f1 margin-bottom}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 set the page margins\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 papersize}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 sets the PDF paper size\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Variables for man pages\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 adjusting}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 adjusts text to left ({\f1 l}), right ({\f1 r}), center ({\f1 c}), or both ({\f1 b}) margins\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 footer}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 footer in man pages\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 header}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 header in man pages\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 hyphenate}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 if {\f1 true} (the default), hyphenation will be used\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 section}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 section number in man pages\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Variables for ms\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 fontfamily}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 font family (e.g.\u160?{\f1 T} or {\f1 P})\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 indent}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 paragraph indent (e.g.\u160?{\f1 2m})\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 lineheight}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 line height (e.g.\u160?{\f1 12p})\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 pointsize}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 point size (e.g.\u160?{\f1 10p})\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Variables set automatically\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc sets these variables automatically in response to {\field{\*\fldinst{HYPERLINK "#options"}}{\fldrslt{\ul
options
}}}
 or document contents; users can also modify them. These vary depending on the output format, and include the following:\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 body}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 body of document\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 date-meta}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 the {\f1 date} variable converted to ISO 8601 YYYY-MM-DD, included in all HTML based formats (dzslides, epub, html, html4, html5, revealjs, s5, slideous, slidy). The recognized formats for {\f1 date} are: {\f1 mm/dd/yyyy}, {\f1 mm/dd/yy}, {\f1 yyyy-mm-dd} (ISO 8601), {\f1 dd MM yyyy} (e.g.\u160?either {\f1 02 Apr 2018} or {\f1 02 April 2018}), {\f1 MM dd, yyyy} (e.g.\u160?{\f1 Apr. 02, 2018} or {\f1 April 02, 2018),}yyyy[mm[dd]]]{\f1 (e.g.}20180402, {\f1 201804} or {\f1 2018}).\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 header-includes}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 contents specified by {\f1 -H/--include-in-header} (may have multiple values)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 include-before}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 contents specified by {\f1 -B/--include-before-body} (may have multiple values)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 include-after}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 contents specified by {\f1 -A/--include-after-body} (may have multiple values)\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 meta-json}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 JSON representation of all of the document\u8217's metadata. Field values are transformed to the selected output format.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 numbersections}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 non-null value if {\f1 -N/--number-sections} was specified\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 sourcefile}, {\f1 outputfile}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 source and destination filenames, as given on the command line. {\f1 sourcefile} can also be a list if input comes from multiple files, or empty if input is from stdin. You can use the following snippet in your template to distinguish them:\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 $if(sourcefile)$\line
$for(sourcefile)$\line
$sourcefile$\line
$endfor$\line
$else$\line
(stdin)\line
$endif$\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Similarly, {\f1 outputfile} can be {\f1 -} if output goes to the terminal.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 If you need absolute paths, use e.g.\u160?{\f1 $curdir$/$sourcefile$}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 curdir}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 working directory from which pandoc is run.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 toc}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 non-null value if {\f1 --toc/--table-of-contents} was specified\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 toc-title}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 title of table of contents (works only with EPUB, HTML, opendocument, odt, docx, pptx, beamer, LaTeX)\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Extensions\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The behavior of some of the readers and writers can be adjusted by enabling or disabling various extensions.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 An extension can be enabled by adding {\f1 +EXTENSION} to the format name and disabled by adding {\f1 -EXTENSION}. For example, {\f1 --from markdown_strict+footnotes} is strict Markdown with footnotes enabled, while {\f1 --from markdown-footnotes-pipe_tables} is pandoc\u8217's Markdown without footnotes or pipe tables.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The markdown reader and writer make by far the most use of extensions. Extensions only used by them are therefore covered in the section {\field{\*\fldinst{HYPERLINK "#pandocs-markdown"}}{\fldrslt{\ul
Pandoc\u8217's Markdown
}}}
 below (See {\field{\*\fldinst{HYPERLINK "#markdown-variants"}}{\fldrslt{\ul
Markdown variants
}}}
 for {\f1 commonmark} and {\f1 gfm}.) In the following, extensions that also work for other formats are covered.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that markdown extensions added to the {\f1 ipynb} format affect Markdown cells in Jupyter notebooks (as do command-line options like {\f1 --atx-headers}).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Typography\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 smart}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Interpret straight quotes as curly quotes, {\f1 ---} as em-dashes, {\f1 --} as en-dashes, and {\f1 ...} as ellipses. Nonbreaking spaces are inserted after certain abbreviations, such as \u8220"Mr.\u8221"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This extension can be enabled/disabled for the following formats:\par}
{\pard \ql \f0 \sa0 \li0 \fi0 input formats\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 markdown}, {\f1 commonmark}, {\f1 latex}, {\f1 mediawiki}, {\f1 org}, {\f1 rst}, {\f1 twiki}\par}
{\pard \ql \f0 \sa0 \li0 \fi0 output formats\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 markdown}, {\f1 latex}, {\f1 context}, {\f1 rst}\par}
{\pard \ql \f0 \sa0 \li0 \fi0 enabled by default in\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 markdown}, {\f1 latex}, {\f1 context} (both input and output)\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note: If you are {\i writing} Markdown, then the {\f1 smart} extension has the reverse effect: what would have been curly quotes comes out straight.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In LaTeX, {\f1 smart} means to use the standard TeX ligatures for quotation marks ({\f1 ``} and {\f1 ''} for double quotes, {\f1 `} and {\f1 '} for single quotes) and dashes ({\f1 --} for en-dash and {\f1 ---} for em-dash). If {\f1 smart} is disabled, then in reading LaTeX pandoc will parse these characters literally. In writing LaTeX, enabling {\f1 smart} tells pandoc to use the ligatures when possible; if {\f1 smart} is disabled pandoc will use unicode quotation mark and dash characters.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Headings and sections\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 auto_identifiers}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A heading without an explicitly specified identifier will be automatically assigned a unique identifier based on the heading text.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This extension can be enabled/disabled for the following formats:\par}
{\pard \ql \f0 \sa0 \li0 \fi0 input formats\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 markdown}, {\f1 latex}, {\f1 rst}, {\f1 mediawiki}, {\f1 textile}\par}
{\pard \ql \f0 \sa0 \li0 \fi0 output formats\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 markdown}, {\f1 muse}\par}
{\pard \ql \f0 \sa0 \li0 \fi0 enabled by default in\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 markdown}, {\f1 muse}\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The default algorithm used to derive the identifier from the heading text is:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Remove all formatting, links, etc.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Remove all footnotes.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Remove all non-alphanumeric characters, except underscores, hyphens, and periods.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Replace all spaces and newlines with hyphens.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Convert all alphabetic characters to lowercase.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Remove everything up to the first letter (identifiers may not begin with a number or punctuation mark).\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If nothing is left after this, use the identifier {\f1 section}.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Thus, for example,\par}
{
\trowd \trgaph120
\clbrdrb\brdrs\cellx4320\clbrdrb\brdrs\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 Heading\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 Identifier\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 {\f1 Heading identifiers in HTML}\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 {\f1 heading-identifiers-in-html}\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 {\f1 Ma\u238?tre d'h\u244?tel}\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 {\f1 ma\u238?tre-dh\u244?tel}\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 {\f1 *Dogs*?--in *my* house?}\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 {\f1 dogs--in-my-house}\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 {\f1 [HTML], [S5], or [RTF]?}\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 {\f1 html-s5-or-rtf}\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 {\f1 3. Applications}\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 {\f1 applications}\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 {\f1 33}\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 {\f1 section}\par}
\cell}
}
\intbl\row}
{\pard \ql \f0 \sa180 \li0 \fi0 \par}
{\pard \ql \f0 \sa180 \li0 \fi0 These rules should, in most cases, allow one to determine the identifier from the heading text. The exception is when several headings have the same text; in this case, the first will get an identifier as described above; the second will get the same identifier with {\f1 -1} appended; the third with {\f1 -2}; and so on.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (However, a different algorithm is used if {\f1 gfm_auto_identifiers} is enabled; see below.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 These identifiers are used to provide link targets in the table of contents generated by the {\f1 --toc|--table-of-contents} option. They also make it easy to provide links from one section of a document to another. A link to this section, for example, might look like this:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 See the section on\line
[heading identifiers](#heading-identifiers-in-html-latex-and-context).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note, however, that this method of providing links to sections works only in HTML, LaTeX, and ConTeXt formats.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If the {\f1 --section-divs} option is specified, then each section will be wrapped in a {\f1 section} (or a {\f1 div}, if {\f1 html4} was specified), and the identifier will be attached to the enclosing {\f1 <section>} (or {\f1 <div>}) tag rather than the heading itself. This allows entire sections to be manipulated using JavaScript or treated differently in CSS.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 ascii_identifiers}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Causes the identifiers produced by {\f1 auto_identifiers} to be pure ASCII. Accents are stripped off of accented Latin letters, and non-Latin letters are omitted.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 gfm_auto_identifiers}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Changes the algorithm used by {\f1 auto_identifiers} to conform to GitHub\u8217's method. Spaces are converted to dashes ({\f1 -}), uppercase characters to lowercase characters, and punctuation characters other than {\f1 -} and {\f1 _} are removed. Emojis are replaced by their names.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Math Input\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The extensions {\field{\*\fldinst{HYPERLINK "#extension-tex_math_dollars"}}{\fldrslt{\ul
{\f1 tex_math_dollars}
}}}
, {\field{\*\fldinst{HYPERLINK "#extension-tex_math_single_backslash"}}{\fldrslt{\ul
{\f1 tex_math_single_backslash}
}}}
, and {\field{\*\fldinst{HYPERLINK "#extension-tex_math_double_backslash"}}{\fldrslt{\ul
{\f1 tex_math_double_backslash}
}}}
 are described in the section about Pandoc\u8217's Markdown.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 However, they can also be used with HTML input. This is handy for reading web pages formatted using MathJax, for example.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Raw HTML/TeX\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The following extensions (especially how they affect Markdown input/output) are also described in more detail in their respective sections of {\field{\*\fldinst{HYPERLINK "#pandocs-markdown"}}{\fldrslt{\ul
Pandoc\u8217's Markdown
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 raw_html}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When converting from HTML, parse elements to raw HTML which are not representable in pandoc\u8217's AST. By default, this is disabled for HTML input.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 raw_tex}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Allows raw LaTeX, TeX, and ConTeXt to be included in a document.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This extension can be enabled/disabled for the following formats (in addition to {\f1 markdown}):\par}
{\pard \ql \f0 \sa0 \li0 \fi0 input formats\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 latex}, {\f1 org}, {\f1 textile}, {\f1 html} (environments, {\f1 \\ref}, and {\f1 \\eqref} only), {\f1 ipynb}\par}
{\pard \ql \f0 \sa0 \li0 \fi0 output formats\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 textile}, {\f1 commonmark}\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note: as applied to {\f1 ipynb}, {\f1 raw_html} and {\f1 raw_tex} affect not only raw TeX in markdown cells, but data with mime type {\f1 text/html} in output cells. Since the {\f1 ipynb} reader attempts to preserve the richest possible outputs when several options are given, you will get best results if you disable {\f1 raw_html} and {\f1 raw_tex} when converting to formats like {\f1 docx} which don\u8217't allow raw {\f1 html} or {\f1 tex}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 native_divs}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This extension is enabled by default for HTML input. This means that {\f1 div}s are parsed to pandoc native elements. (Alternatively, you can parse them to raw HTML using {\f1 -f html-native_divs+raw_html}.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When converting HTML to Markdown, for example, you may want to drop all {\f1 div}s and {\f1 span}s:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -f html-native_divs-native_spans -t markdown\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 native_spans}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Analogous to {\f1 native_divs} above.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Literate Haskell support\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 literate_haskell}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Treat the document as literate Haskell source.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This extension can be enabled/disabled for the following formats:\par}
{\pard \ql \f0 \sa0 \li0 \fi0 input formats\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 markdown}, {\f1 rst}, {\f1 latex}\par}
{\pard \ql \f0 \sa0 \li0 \fi0 output formats\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 markdown}, {\f1 rst}, {\f1 latex}, {\f1 html}\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you append {\f1 +lhs} (or {\f1 +literate_haskell}) to one of the formats above, pandoc will treat the document as literate Haskell source. This means that\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab In Markdown input, \u8220"bird track\u8221" sections will be parsed as Haskell code rather than block quotations. Text between {\f1 \\begin\{code\}} and {\f1 \\end\{code\}} will also be treated as Haskell code. For ATX-style headings the character \u8216'=\u8217' will be used instead of \u8216'#\u8217'.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab In Markdown output, code blocks with classes {\f1 haskell} and {\f1 literate} will be rendered using bird tracks, and block quotations will be indented one space, so they will not be treated as Haskell code. In addition, headings will be rendered setext-style (with underlines) rather than ATX-style (with \u8216'#\u8217' characters). (This is because ghc treats \u8216'#\u8217' characters in column 1 as introducing line numbers.)\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab In restructured text input, \u8220"bird track\u8221" sections will be parsed as Haskell code.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab In restructured text output, code blocks with class {\f1 haskell} will be rendered using bird tracks.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab In LaTeX input, text in {\f1 code} environments will be parsed as Haskell code.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab In LaTeX output, code blocks with class {\f1 haskell} will be rendered inside {\f1 code} environments.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab In HTML output, code blocks with class {\f1 haskell} will be rendered with class {\f1 literatehaskell} and bird tracks.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Examples:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -f markdown+lhs -t html\par}
{\pard \ql \f0 \sa180 \li0 \fi0 reads literate Haskell source formatted with Markdown conventions and writes ordinary HTML (without bird tracks).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -f markdown+lhs -t html+lhs\par}
{\pard \ql \f0 \sa180 \li0 \fi0 writes HTML with the Haskell code in bird tracks, so it can be copied and pasted as literate Haskell source.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that GHC expects the bird tracks in the first column, so indented literate code blocks (e.g.\u160?inside an itemized environment) will not be picked up by the Haskell compiler.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Other extensions\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 empty_paragraphs}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Allows empty paragraphs. By default empty paragraphs are omitted.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This extension can be enabled/disabled for the following formats:\par}
{\pard \ql \f0 \sa0 \li0 \fi0 input formats\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 docx}, {\f1 html}\par}
{\pard \ql \f0 \sa0 \li0 \fi0 output formats\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 docx}, {\f1 odt}, {\f1 opendocument}, {\f1 html}\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 native_numbering}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Enables native numbering of figures and tables. Enumeration starts at 1.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This extension can be enabled/disabled for the following formats:\par}
{\pard \ql \f0 \sa0 \li0 \fi0 output formats\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 odt}, {\f1 opendocument}\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 styles}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When converting from docx, read all docx styles as divs (for paragraph styles) and spans (for character styles) regardless of whether pandoc understands the meaning of these styles. This can be used with {\field{\*\fldinst{HYPERLINK "#custom-styles"}}{\fldrslt{\ul
docx custom styles
}}}
. Disabled by default.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 input formats\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 docx}\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 amuse}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In the {\f1 muse} input format, this enables Text::Amuse extensions to Emacs Muse markup.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 citations}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Some aspects of {\field{\*\fldinst{HYPERLINK "#citations"}}{\fldrslt{\ul
Pandoc\u8217's Markdown citation syntax
}}}
 are also accepted in {\f1 org} input.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 ntb}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In the {\f1 context} output format this enables the use of {\field{\*\fldinst{HYPERLINK "https://wiki.contextgarden.net/TABLE"}}{\fldrslt{\ul
Natural Tables (TABLE)
}}}
 instead of the default {\field{\*\fldinst{HYPERLINK "https://wiki.contextgarden.net/xtables"}}{\fldrslt{\ul
Extreme Tables (xtables)
}}}
. Natural tables allow more fine-grained global customization but come at a performance penalty compared to extreme tables.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Pandoc\u8217's Markdown\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc understands an extended and slightly revised version of John Gruber\u8217's {\field{\*\fldinst{HYPERLINK "https://daringfireball.net/projects/markdown/"}}{\fldrslt{\ul
Markdown
}}}
 syntax. This document explains the syntax, noting differences from standard Markdown. Except where noted, these differences can be suppressed by using the {\f1 markdown_strict} format instead of {\f1 markdown}. Extensions can be enabled or disabled to specify the behavior more granularly. They are described in the following. See also {\field{\*\fldinst{HYPERLINK "#extensions"}}{\fldrslt{\ul
Extensions
}}}
 above, for extensions that work also on other formats.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Philosophy\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Markdown is designed to be easy to write, and, even more importantly, easy to read:\par}
{\pard \ql \f0 \sa180 \li720 \fi0 A Markdown-formatted document should be publishable as-is, as plain text, without looking like it\u8217's been marked up with tags or formatting instructions. \u8211- {\field{\*\fldinst{HYPERLINK "https://daringfireball.net/projects/markdown/syntax#philosophy"}}{\fldrslt{\ul
John Gruber
}}}
\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This principle has guided pandoc\u8217's decisions in finding syntax for tables, footnotes, and other extensions.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 There is, however, one respect in which pandoc\u8217's aims are different from the original aims of Markdown. Whereas Markdown was originally designed with HTML generation in mind, pandoc is designed for multiple output formats. Thus, while pandoc allows the embedding of raw HTML, it discourages it, and provides other, non-HTMLish ways of representing important document elements like definition lists, tables, mathematics, and footnotes.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Paragraphs\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A paragraph is one or more lines of text followed by one or more blank lines. Newlines are treated as spaces, so you can reflow your paragraphs as you like. If you need a hard line break, put two or more spaces at the end of a line.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 escaped_line_breaks}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A backslash followed by a newline is also a hard line break. Note: in multiline and grid table cells, this is the only way to create a hard line break, since trailing spaces in the cells are ignored.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Headings\par}
{\pard \ql \f0 \sa180 \li0 \fi0 There are two kinds of headings: Setext and ATX.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Setext-style headings\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A setext-style heading is a line of text \u8220"underlined\u8221" with a row of {\f1 =} signs (for a level-one heading) or {\f1 -} signs (for a level-two heading):\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 A level-one heading\line
===================\line
\line
A level-two heading\line
-------------------\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The heading text can contain inline formatting, such as emphasis (see {\field{\*\fldinst{HYPERLINK "#inline-formatting"}}{\fldrslt{\ul
Inline formatting
}}}
, below).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 ATX-style headings\par}
{\pard \ql \f0 \sa180 \li0 \fi0 An ATX-style heading consists of one to six {\f1 #} signs and a line of text, optionally followed by any number of {\f1 #} signs. The number of {\f1 #} signs at the beginning of the line is the heading level:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## A level-two heading\line
\line
### A level-three heading ###\par}
{\pard \ql \f0 \sa180 \li0 \fi0 As with setext-style headings, the heading text can contain formatting:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # A level-one heading with a [link](/url) and *emphasis*\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 blank_before_header}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Standard Markdown syntax does not require a blank line before a heading. Pandoc does require this (except, of course, at the beginning of the document). The reason for the requirement is that it is all too easy for a {\f1 #} to end up at the beginning of a line by accident (perhaps through line wrapping). Consider, for example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 I like several of their flavors of ice cream:\line
#22, for example, and #5.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 space_in_atx_header}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Many Markdown implementations do not require a space between the opening {\f1 #}s of an ATX heading and the heading text, so that {\f1 #5 bolt} and {\f1 #hashtag} count as headings. With this extension, pandoc does require the space.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Heading identifiers\par}
{\pard \ql \f0 \sa180 \li0 \fi0 See also the {\field{\*\fldinst{HYPERLINK "#extension-auto_identifiers"}}{\fldrslt{\ul
{\f1 auto_identifiers} extension
}}}
 above.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 header_attributes}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Headings can be assigned attributes using this syntax at the end of the line containing the heading text:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 \{#identifier .class .class key=value key=value\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Thus, for example, the following headings will all be assigned the identifier {\f1 foo}:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # My heading \{#foo\}\line
\line
## My heading ##    \{#foo\}\line
\line
My other heading   \{#foo\}\line
---------------\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (This syntax is compatible with {\field{\*\fldinst{HYPERLINK "https://michelf.ca/projects/php-markdown/extra/"}}{\fldrslt{\ul
PHP Markdown Extra
}}}
.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that although this syntax allows assignment of classes and key/value attributes, writers generally don\u8217't use all of this information. Identifiers, classes, and key/value attributes are used in HTML and HTML-based formats such as EPUB and slidy. Identifiers are used for labels and link anchors in the LaTeX, ConTeXt, Textile, Jira markup, and AsciiDoc writers.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Headings with the class {\f1 unnumbered} will not be numbered, even if {\f1 --number-sections} is specified. A single hyphen ({\f1 -}) in an attribute context is equivalent to {\f1 .unnumbered}, and preferable in non-English documents. So,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # My heading \{-\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 is just the same as\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # My heading \{.unnumbered\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If the {\f1 unlisted} class is present in addition to {\f1 unnumbered}, the heading will not be included in a table of contents. (Currently this feature is only implemented for certain formats: those based on LaTeX and HTML, PowerPoint, and RTF.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 implicit_header_references}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc behaves as if reference links have been defined for each heading. So, to link to a heading\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Heading identifiers in HTML\par}
{\pard \ql \f0 \sa180 \li0 \fi0 you can simply write\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [Heading identifiers in HTML]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 or\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [Heading identifiers in HTML][]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 or\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [the section on heading identifiers][heading identifiers in\line
HTML]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 instead of giving the identifier explicitly:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [Heading identifiers in HTML](#heading-identifiers-in-html)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If there are multiple headings with identical text, the corresponding reference will link to the first one only, and you will need to use explicit links to link to the others, as described above.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Like regular reference links, these references are case-insensitive.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Explicit link reference definitions always take priority over implicit heading references. So, in the following example, the link will point to {\f1 bar}, not to {\f1 #foo}:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Foo\line
\line
[foo]: bar\line
\line
See [foo]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Block quotations\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Markdown uses email conventions for quoting blocks of text. A block quotation is one or more paragraphs or other block elements (such as lists or headings), with each line preceded by a {\f1 >} character and an optional space. (The {\f1 >} need not start at the left margin, but it should not be indented more than three spaces.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 > This is a block quote. This\line
> paragraph has two lines.\line
>\line
> 1. This is a list inside a block quote.\line
> 2. Second item.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A \u8220"lazy\u8221" form, which requires the {\f1 >} character only on the first line of each block, is also allowed:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 > This is a block quote. This\line
paragraph has two lines.\line
\line
> 1. This is a list inside a block quote.\line
2. Second item.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Among the block elements that can be contained in a block quote are other block quotes. That is, block quotes can be nested:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 > This is a block quote.\line
>\line
> > A block quote within a block quote.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If the {\f1 >} character is followed by an optional space, that space will be considered part of the block quote marker and not part of the indentation of the contents. Thus, to put an indented code block in a block quote, you need five spaces after the {\f1 >}:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 >     code\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 blank_before_blockquote}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Standard Markdown syntax does not require a blank line before a block quote. Pandoc does require this (except, of course, at the beginning of the document). The reason for the requirement is that it is all too easy for a {\f1 >} to end up at the beginning of a line by accident (perhaps through line wrapping). So, unless the {\f1 markdown_strict} format is used, the following does not produce a nested block quote in pandoc:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 > This is a block quote.\line
>> Nested.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Verbatim (code) blocks\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Indented code blocks\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A block of text indented four spaces (or one tab) is treated as verbatim text: that is, special characters do not trigger special formatting, and all spaces and line breaks are preserved. For example,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     if (a > 3) \{\line
      moveShip(5 * gravity, DOWN);\line
    \}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The initial (four space or one tab) indentation is not considered part of the verbatim text, and is removed in the output.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note: blank lines in the verbatim text need not begin with four spaces.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Fenced code blocks\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 fenced_code_blocks}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In addition to standard indented code blocks, pandoc supports {\i fenced} code blocks. These begin with a row of three or more tildes ({\f1 ~}) and end with a row of tildes that must be at least as long as the starting row. Everything between these lines is treated as code. No indentation is necessary:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ~~~~~~~\line
if (a > 3) \{\line
  moveShip(5 * gravity, DOWN);\line
\}\line
~~~~~~~\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Like regular code blocks, fenced code blocks must be separated from surrounding text by blank lines.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If the code itself contains a row of tildes or backticks, just use a longer row of tildes or backticks at the start and end:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ~~~~~~~~~~~~~~~~\line
~~~~~~~~~~\line
code including tildes\line
~~~~~~~~~~\line
~~~~~~~~~~~~~~~~\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 backtick_code_blocks}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Same as {\f1 fenced_code_blocks}, but uses backticks ({\f1 `}) instead of tildes ({\f1 ~}).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 fenced_code_attributes}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Optionally, you may attach attributes to fenced or backtick code block using this syntax:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ~~~~ \{#mycode .haskell .numberLines startFrom="100"\}\line
qsort []     = []\line
qsort (x:xs) = qsort (filter (< x) xs) ++ [x] ++\line
               qsort (filter (>= x) xs)\line
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Here {\f1 mycode} is an identifier, {\f1 haskell} and {\f1 numberLines} are classes, and {\f1 startFrom} is an attribute with value {\f1 100}. Some output formats can use this information to do syntax highlighting. Currently, the only output formats that uses this information are HTML, LaTeX, Docx, Ms, and PowerPoint. If highlighting is supported for your output format and language, then the code block above will appear highlighted, with numbered lines. (To see which languages are supported, type {\f1 pandoc --list-highlight-languages}.) Otherwise, the code block above will appear as follows:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <pre id="mycode" class="haskell numberLines" startFrom="100">\line
  <code>\line
  ...\line
  </code>\line
</pre>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The {\f1 numberLines} (or {\f1 number-lines}) class will cause the lines of the code block to be numbered, starting with {\f1 1} or the value of the {\f1 startFrom} attribute. The {\f1 lineAnchors} (or {\f1 line-anchors}) class will cause the lines to be clickable anchors in HTML output.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A shortcut form can also be used for specifying the language of the code block:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ```haskell\line
qsort [] = []\line
```\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is equivalent to:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ``` \{.haskell\}\line
qsort [] = []\line
```\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If the {\f1 fenced_code_attributes} extension is disabled, but input contains class attribute(s) for the code block, the first class attribute will be printed after the opening fence as a bare word.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To prevent all highlighting, use the {\f1 --no-highlight} flag. To set the highlighting style, use {\f1 --highlight-style}. For more information on highlighting, see {\field{\*\fldinst{HYPERLINK "#syntax-highlighting"}}{\fldrslt{\ul
Syntax highlighting
}}}
, below.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Line blocks\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 line_blocks}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A line block is a sequence of lines beginning with a vertical bar ({\f1 |}) followed by a space. The division into lines will be preserved in the output, as will any leading spaces; otherwise, the lines will be formatted as Markdown. This is useful for verse and addresses:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 | The limerick packs laughs anatomical\line
| In space that is quite economical.\line
|    But the good ones I've seen\line
|    So seldom are clean\line
| And the clean ones so seldom are comical\line
\line
| 200 Main St.\line
| Berkeley, CA 94718\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The lines can be hard-wrapped if needed, but the continuation line must begin with a space.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 | The Right Honorable Most Venerable and Righteous Samuel L.\line
  Constable, Jr.\line
| 200 Main St.\line
| Berkeley, CA 94718\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This syntax is borrowed from {\field{\*\fldinst{HYPERLINK "https://docutils.sourceforge.io/docs/ref/rst/introduction.html"}}{\fldrslt{\ul
reStructuredText
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Lists\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Bullet lists\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A bullet list is a list of bulleted list items. A bulleted list item begins with a bullet ({\f1 *}, {\f1 +}, or {\f1 -}). Here is a simple example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 * one\line
* two\line
* three\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This will produce a \u8220"compact\u8221" list. If you want a \u8220"loose\u8221" list, in which each item is formatted as a paragraph, put spaces between the items:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 * one\line
\line
* two\line
\line
* three\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The bullets need not be flush with the left margin; they may be indented one, two, or three spaces. The bullet must be followed by whitespace.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 List items look best if subsequent lines are flush with the first line (after the bullet):\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 * here is my first\line
  list item.\line
* and my second.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 But Markdown also allows a \u8220"lazy\u8221" format:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 * here is my first\line
list item.\line
* and my second.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Block content in list items\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A list item may contain multiple paragraphs and other block-level content. However, subsequent paragraphs must be preceded by a blank line and indented to line up with the first non-space content after the list marker.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1   * First paragraph.\line
\line
    Continued.\line
\line
  * Second paragraph. With a code block, which must be indented\line
    eight spaces:\line
\line
        \{ code \}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Exception: if the list marker is followed by an indented code block, which must begin 5 spaces after the list marker, then subsequent paragraphs must begin two columns after the last character of the list marker:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 *     code\line
\line
  continuation paragraph\par}
{\pard \ql \f0 \sa180 \li0 \fi0 List items may include other lists. In this case the preceding blank line is optional. The nested list must be indented to line up with the first non-space character after the list marker of the containing list item.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 * fruits\line
  + apples\line
    - macintosh\line
    - red delicious\line
  + pears\line
  + peaches\line
* vegetables\line
  + broccoli\line
  + chard\par}
{\pard \ql \f0 \sa180 \li0 \fi0 As noted above, Markdown allows you to write list items \u8220"lazily,\u8221" instead of indenting continuation lines. However, if there are multiple paragraphs or other blocks in a list item, the first line of each must be indented.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 + A lazy, lazy, list\line
item.\line
\line
+ Another one; this looks\line
bad but is legal.\line
\line
    Second paragraph of second\line
list item.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Ordered lists\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Ordered lists work just like bulleted lists, except that the items begin with enumerators rather than bullets.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In standard Markdown, enumerators are decimal numbers followed by a period and a space. The numbers themselves are ignored, so there is no difference between this list:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1.  one\line
2.  two\line
3.  three\par}
{\pard \ql \f0 \sa180 \li0 \fi0 and this one:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 5.  one\line
7.  two\line
1.  three\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 fancy_lists}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Unlike standard Markdown, pandoc allows ordered list items to be marked with uppercase and lowercase letters and roman numerals, in addition to Arabic numerals. List markers may be enclosed in parentheses or followed by a single right-parentheses or period. They must be separated from the text that follows by at least one space, and, if the list marker is a capital letter with a period, by at least two spaces.{\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 The point of this rule is to ensure that normal paragraphs starting with people\u8217's initials, like\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 B. Russell was an English philosopher.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 do not get treated as list items.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This rule will not prevent\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 (C) 2007 Joe Smith\par}
{\pard \ql \f0 \sa180 \li0 \fi0 from being interpreted as a list item. In this case, a backslash escape can be used:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 (C\\) 2007 Joe Smith\par}
}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The {\f1 fancy_lists} extension also allows \u8216'{\f1 #}\u8217' to be used as an ordered list marker in place of a numeral:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 #. one\line
#. two\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 startnum}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc also pays attention to the type of list marker used, and to the starting number, and both of these are preserved where possible in the output format. Thus, the following yields a list with numbers followed by a single parenthesis, starting with 9, and a sublist with lowercase roman numerals:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1  9)  Ninth\line
10)  Tenth\line
11)  Eleventh\line
       i. subone\line
      ii. subtwo\line
     iii. subthree\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc will start a new list each time a different type of list marker is used. So, the following will create three lists:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 (2) Two\line
(5) Three\line
1.  Four\line
*   Five\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If default list markers are desired, use {\f1 #.}:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 #.  one\line
#.  two\line
#.  three\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 task_lists}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc supports task lists, using the syntax of GitHub-Flavored Markdown.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 - [ ] an unchecked task list item\line
- [x] checked item\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Definition lists\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 definition_lists}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc supports definition lists, using the syntax of {\field{\*\fldinst{HYPERLINK "https://michelf.ca/projects/php-markdown/extra/"}}{\fldrslt{\ul
PHP Markdown Extra
}}}
 with some extensions.{\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 I have been influenced by the suggestions of {\field{\*\fldinst{HYPERLINK "https://justatheory.com/2009/02/modest-markdown-proposal/"}}{\fldrslt{\ul
David Wheeler
}}}
.\par}
}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Term 1\line
\line
:   Definition 1\line
\line
Term 2 with *inline markup*\line
\line
:   Definition 2\line
\line
        \{ some code, part of Definition 2 \}\line
\line
    Third paragraph of definition 2.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Each term must fit on one line, which may optionally be followed by a blank line, and must be followed by one or more definitions. A definition begins with a colon or tilde, which may be indented one or two spaces.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A term may have multiple definitions, and each definition may consist of one or more block elements (paragraph, code block, list, etc.), each indented four spaces or one tab stop. The body of the definition (including the first line, aside from the colon or tilde) should be indented four spaces. However, as with other Markdown lists, you can \u8220"lazily\u8221" omit indentation except at the beginning of a paragraph or other block element:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Term 1\line
\line
:   Definition\line
with lazy continuation.\line
\line
    Second paragraph of the definition.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you leave space before the definition (as in the example above), the text of the definition will be treated as a paragraph. In some output formats, this will mean greater spacing between term/definition pairs. For a more compact definition list, omit the space before the definition:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Term 1\line
  ~ Definition 1\line
\line
Term 2\line
  ~ Definition 2a\line
  ~ Definition 2b\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that space between items in a definition list is required. (A variant that loosens this requirement, but disallows \u8220"lazy\u8221" hard wrapping, can be activated with {\f1 compact_definition_lists}: see {\field{\*\fldinst{HYPERLINK "#non-pandoc-extensions"}}{\fldrslt{\ul
Non-pandoc extensions
}}}
, below.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Numbered example lists\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 example_lists}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The special list marker {\f1 @} can be used for sequentially numbered examples. The first list item with a {\f1 @} marker will be numbered \u8216'1\u8217', the next \u8216'2\u8217', and so on, throughout the document. The numbered examples need not occur in a single list; each new list using {\f1 @} will take up where the last stopped. So, for example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 (@)  My first example will be numbered (1).\line
(@)  My second example will be numbered (2).\line
\line
Explanation of examples.\line
\line
(@)  My third example will be numbered (3).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Numbered examples can be labeled and referred to elsewhere in the document:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 (@good)  This is a good example.\line
\line
As (@good) illustrates, ...\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The label can be any string of alphanumeric characters, underscores, or hyphens.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note: continuation paragraphs in example lists must always be indented four spaces, regardless of the length of the list marker. That is, example lists always behave as if the {\f1 four_space_rule} extension is set. This is because example labels tend to be long, and indenting content to the first non-space character after the label would be awkward.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Compact and loose lists\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc behaves differently from {\f1 Markdown.pl} on some \u8220"edge cases\u8221" involving lists. Consider this source:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 +   First\line
+   Second:\line
    -   Fee\line
    -   Fie\line
    -   Foe\line
\line
+   Third\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc transforms this into a \u8220"compact list\u8221" (with no {\f1 <p>} tags around \u8220"First\u8221", \u8220"Second\u8221", or \u8220"Third\u8221"), while Markdown puts {\f1 <p>} tags around \u8220"Second\u8221" and \u8220"Third\u8221" (but not \u8220"First\u8221"), because of the blank space around \u8220"Third\u8221". Pandoc follows a simple rule: if the text is followed by a blank line, it is treated as a paragraph. Since \u8220"Second\u8221" is followed by a list, and not a blank line, it isn\u8217't treated as a paragraph. The fact that the list is followed by a blank line is irrelevant. (Note: Pandoc works this way even when the {\f1 markdown_strict} format is specified. This behavior is consistent with the official Markdown syntax description, even though it is different from that of {\f1 Markdown.pl}.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Ending a list\par}
{\pard \ql \f0 \sa180 \li0 \fi0 What if you want to put an indented code block after a list?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 -   item one\line
-   item two\line
\line
    \{ my code block \}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Trouble! Here pandoc (like other Markdown implementations) will treat {\f1 \{ my code block \}} as the second paragraph of item two, and not as a code block.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To \u8220"cut off\u8221" the list after item two, you can insert some non-indented content, like an HTML comment, which won\u8217't produce visible output in any format:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 -   item one\line
-   item two\line
\line
<!-- end of list -->\line
\line
    \{ my code block \}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You can use the same trick if you want two consecutive lists instead of one big list:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1.  one\line
2.  two\line
3.  three\line
\line
<!-- -->\line
\line
1.  uno\line
2.  dos\line
3.  tres\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Horizontal rules\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A line containing a row of three or more {\f1 *}, {\f1 -}, or {\f1 _} characters (optionally separated by spaces) produces a horizontal rule:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 *  *  *  *\line
\line
---------------\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Tables\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Four kinds of tables may be used. The first three kinds presuppose the use of a fixed-width font, such as Courier. The fourth kind can be used with proportionally spaced fonts, as it does not require lining up columns.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 table_captions}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A caption may optionally be provided with all 4 kinds of tables (as illustrated in the examples below). A caption is a paragraph beginning with the string {\f1 Table:} (or just {\f1 :}), which will be stripped off. It may appear either before or after the table.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 simple_tables}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Simple tables look like this:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1   Right     Left     Center     Default\line
-------     ------ ----------   -------\line
     12     12        12            12\line
    123     123       123          123\line
      1     1          1             1\line
\line
Table:  Demonstration of simple table syntax.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The header and table rows must each fit on one line. Column alignments are determined by the position of the header text relative to the dashed line below it:{\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 This scheme is due to Michel Fortin, who proposed it on the {\field{\*\fldinst{HYPERLINK "http://six.pairlist.net/pipermail/markdown-discuss/2005-March/001097.html"}}{\fldrslt{\ul
Markdown discussion list
}}}
.\par}
}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If the dashed line is flush with the header text on the right side but extends beyond it on the left, the column is right-aligned.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If the dashed line is flush with the header text on the left side but extends beyond it on the right, the column is left-aligned.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If the dashed line extends beyond the header text on both sides, the column is centered.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If the dashed line is flush with the header text on both sides, the default alignment is used (in most cases, this will be left).\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The table must end with a blank line, or a line of dashes followed by a blank line.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The column header row may be omitted, provided a dashed line is used to end the table. For example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 -------     ------ ----------   -------\line
     12     12        12             12\line
    123     123       123           123\line
      1     1          1              1\line
-------     ------ ----------   -------\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When the header row is omitted, column alignments are determined on the basis of the first line of the table body. So, in the tables above, the columns would be right, left, center, and right aligned, respectively.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 multiline_tables}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Multiline tables allow header and table rows to span multiple lines of text (but cells that span multiple columns or rows of the table are not supported). Here is an example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 -------------------------------------------------------------\line
 Centered   Default           Right Left\line
  Header    Aligned         Aligned Aligned\line
----------- ------- --------------- -------------------------\line
   First    row                12.0 Example of a row that\line
                                    spans multiple lines.\line
\line
  Second    row                 5.0 Here's another one. Note\line
                                    the blank line between\line
                                    rows.\line
-------------------------------------------------------------\line
\line
Table: Here's the caption. It, too, may span\line
multiple lines.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 These work like simple tables, but with the following differences:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab They must begin with a row of dashes, before the header text (unless the header row is omitted).\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab They must end with a row of dashes, then a blank line.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab The rows must be separated by blank lines.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In multiline tables, the table parser pays attention to the widths of the columns, and the writers try to reproduce these relative widths in the output. So, if you find that one of the columns is too narrow in the output, try widening it in the Markdown source.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The header may be omitted in multiline tables as well as simple tables:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ----------- ------- --------------- -------------------------\line
   First    row                12.0 Example of a row that\line
                                    spans multiple lines.\line
\line
  Second    row                 5.0 Here's another one. Note\line
                                    the blank line between\line
                                    rows.\line
----------- ------- --------------- -------------------------\line
\line
: Here's a multiline table without a header.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 It is possible for a multiline table to have just one row, but the row should be followed by a blank line (and then the row of dashes that ends the table), or the table may be interpreted as a simple table.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 grid_tables}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Grid tables look like this:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 : Sample grid table.\line
\line
+---------------+---------------+--------------------+\line
| Fruit         | Price         | Advantages         |\line
+===============+===============+====================+\line
| Bananas       | $1.34         | - built-in wrapper |\line
|               |               | - bright color     |\line
+---------------+---------------+--------------------+\line
| Oranges       | $2.10         | - cures scurvy     |\line
|               |               | - tasty            |\line
+---------------+---------------+--------------------+\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The row of {\f1 =}s separates the header from the table body, and can be omitted for a headerless table. The cells of grid tables may contain arbitrary block elements (multiple paragraphs, code blocks, lists, etc.). Cells that span multiple columns or rows are not supported. Grid tables can be created easily using Emacs\u8217' table-mode ({\f1 M-x table-insert}).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Alignments can be specified as with pipe tables, by putting colons at the boundaries of the separator line after the header:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 +---------------+---------------+--------------------+\line
| Right         | Left          | Centered           |\line
+==============:+:==============+:==================:+\line
| Bananas       | $1.34         | built-in wrapper   |\line
+---------------+---------------+--------------------+\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For headerless tables, the colons go on the top line instead:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 +--------------:+:--------------+:------------------:+\line
| Right         | Left          | Centered           |\line
+---------------+---------------+--------------------+\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs20 Grid Table Limitations\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc does not support grid tables with row spans or column spans. This means that neither variable numbers of columns across rows nor variable numbers of rows across columns are supported by Pandoc. All grid tables must have the same number of columns in each row, and the same number of rows in each column. For example, the Docutils {\field{\*\fldinst{HYPERLINK "https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#grid-tables"}}{\fldrslt{\ul
sample grid tables
}}}
 will not render as expected with Pandoc.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 pipe_tables}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pipe tables look like this:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 | Right | Left | Default | Center |\line
|------:|:-----|---------|:------:|\line
|   12  |  12  |    12   |    12  |\line
|  123  |  123 |   123   |   123  |\line
|    1  |    1 |     1   |     1  |\line
\line
  : Demonstration of pipe table syntax.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The syntax is identical to {\field{\*\fldinst{HYPERLINK "https://michelf.ca/projects/php-markdown/extra/#table"}}{\fldrslt{\ul
PHP Markdown Extra tables
}}}
. The beginning and ending pipe characters are optional, but pipes are required between all columns. The colons indicate column alignment as shown. The header cannot be omitted. To simulate a headerless table, include a header with blank cells.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Since the pipes indicate column boundaries, columns need not be vertically aligned, as they are in the above example. So, this is a perfectly legal (though ugly) pipe table:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 fruit| price\line
-----|-----:\line
apple|2.05\line
pear|1.37\line
orange|3.09\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The cells of pipe tables cannot contain block elements like paragraphs and lists, and cannot span multiple lines. If a pipe table contains a row whose printable content is wider than the column width (see {\f1 --columns}), then the table will take up the full text width and the cell contents will wrap, with the relative cell widths determined by the number of dashes in the line separating the table header from the table body. (For example {\f1 ---|-} would make the first column 3/4 and the second column 1/4 of the full text width.) On the other hand, if no lines are wider than column width, then cell contents will not be wrapped, and the cells will be sized to their contents.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note: pandoc also recognizes pipe tables of the following form, as can be produced by Emacs\u8217' orgtbl-mode:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 | One | Two   |\line
|-----+-------|\line
| my  | table |\line
| is  | nice  |\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The difference is that {\f1 +} is used instead of {\f1 |}. Other orgtbl features are not supported. In particular, to get non-default column alignment, you\u8217'll need to add colons as above.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Metadata blocks\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 pandoc_title_block}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If the file begins with a title block\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 % title\line
% author(s) (separated by semicolons)\line
% date\par}
{\pard \ql \f0 \sa180 \li0 \fi0 it will be parsed as bibliographic information, not regular text. (It will be used, for example, in the title of standalone LaTeX or HTML output.) The block may contain just a title, a title and an author, or all three elements. If you want to include an author but no title, or a title and a date but no author, you need a blank line:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 %\line
% Author\line
\line
% My title\line
%\line
% June 15, 2006\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The title may occupy multiple lines, but continuation lines must begin with leading space, thus:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 % My title\line
  on multiple lines\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If a document has multiple authors, the authors may be put on separate lines with leading space, or separated by semicolons, or both. So, all of the following are equivalent:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 % Author One\line
  Author Two\line
\line
% Author One; Author Two\line
\line
% Author One;\line
  Author Two\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The date must fit on one line.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 All three metadata fields may contain standard inline formatting (italics, links, footnotes, etc.).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Title blocks will always be parsed, but they will affect the output only when the {\f1 --standalone} ({\f1 -s}) option is chosen. In HTML output, titles will appear twice: once in the document head \u8211- this is the title that will appear at the top of the window in a browser \u8211- and once at the beginning of the document body. The title in the document head can have an optional prefix attached ({\f1 --title-prefix} or {\f1 -T} option). The title in the body appears as an H1 element with class \u8220"title\u8221", so it can be suppressed or reformatted with CSS. If a title prefix is specified with {\f1 -T} and no title block appears in the document, the title prefix will be used by itself as the HTML title.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The man page writer extracts a title, man page section number, and other header and footer information from the title line. The title is assumed to be the first word on the title line, which may optionally end with a (single-digit) section number in parentheses. (There should be no space between the title and the parentheses.) Anything after this is assumed to be additional footer and header text. A single pipe character ({\f1 |}) should be used to separate the footer text from the header text. Thus,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 % PANDOC(1)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 will yield a man page with the title {\f1 PANDOC} and section 1.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 % PANDOC(1) Pandoc User Manuals\par}
{\pard \ql \f0 \sa180 \li0 \fi0 will also have \u8220"Pandoc User Manuals\u8221" in the footer.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 % PANDOC(1) Pandoc User Manuals | Version 4.0\par}
{\pard \ql \f0 \sa180 \li0 \fi0 will also have \u8220"Version 4.0\u8221" in the header.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 yaml_metadata_block}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A {\field{\*\fldinst{HYPERLINK "https://yaml.org/spec/1.2/spec.html"}}{\fldrslt{\ul
YAML
}}}
 metadata block is a valid YAML object, delimited by a line of three hyphens ({\f1 ---}) at the top and a line of three hyphens ({\f1 ---}) or three dots ({\f1 ...}) at the bottom. A YAML metadata block may occur anywhere in the document, but if it is not at the beginning, it must be preceded by a blank line. (Note that, because of the way pandoc concatenates input files when several are provided, you may also keep the metadata in a separate YAML file and pass it to pandoc as an argument, along with your Markdown files:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc chap1.md chap2.md chap3.md metadata.yaml -s -o book.html\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Just be sure that the YAML file begins with {\f1 ---} and ends with {\f1 ---} or {\f1 ...}.) Alternatively, you can use the {\f1 --metadata-file} option. Using that approach however, you cannot reference content (like footnotes) from the main markdown input document.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Metadata will be taken from the fields of the YAML object and added to any existing document metadata. Metadata can contain lists and objects (nested arbitrarily), but all string scalars will be interpreted as Markdown. Fields with names ending in an underscore will be ignored by pandoc. (They may be given a role by external processors.) Field names must not be interpretable as YAML numbers or boolean values (so, for example, {\f1 yes}, {\f1 True}, and {\f1 15} cannot be used as field names).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A document may contain multiple metadata blocks. If two metadata blocks attempt to set the same field, the value from the second block will be taken.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When pandoc is used with {\f1 -t markdown} to create a Markdown document, a YAML metadata block will be produced only if the {\f1 -s/--standalone} option is used. All of the metadata will appear in a single block at the beginning of the document.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that {\field{\*\fldinst{HYPERLINK "https://yaml.org/spec/1.2/spec.html"}}{\fldrslt{\ul
YAML
}}}
 escaping rules must be followed. Thus, for example, if a title contains a colon, it must be quoted. The pipe character ({\f1 |}) can be used to begin an indented block that will be interpreted literally, without need for escaping. This form is necessary when the field contains blank lines or block-level formatting:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ---\line
title:  'This is the title: it contains a colon'\line
author:\line
- Author One\line
- Author Two\line
keywords: [nothing, nothingness]\line
abstract: |\line
  This is the abstract.\line
\line
  It consists of two paragraphs.\line
...\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Template variables will be set automatically from the metadata. Thus, for example, in writing HTML, the variable {\f1 abstract} will be set to the HTML equivalent of the Markdown in the {\f1 abstract} field:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <p>This is the abstract.</p>\line
<p>It consists of two paragraphs.</p>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Variables can contain arbitrary YAML structures, but the template must match this structure. The {\f1 author} variable in the default templates expects a simple list or string, but can be changed to support more complicated structures. The following combination, for example, would add an affiliation to the author if one is given:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ---\line
title: The document title\line
author:\line
- name: Author One\line
  affiliation: University of Somewhere\line
- name: Author Two\line
  affiliation: University of Nowhere\line
...\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To use the structured authors in the example above, you would need a custom template:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $for(author)$\line
$if(author.name)$\line
$author.name$$if(author.affiliation)$ ($author.affiliation$)$endif$\line
$else$\line
$author$\line
$endif$\line
$endfor$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Raw content to include in the document\u8217's header may be specified using {\f1 header-includes}; however, it is important to mark up this content as raw code for a particular output format, using the {\field{\*\fldinst{HYPERLINK "#extension-raw_attribute"}}{\fldrslt{\ul
{\f1 raw_attribute} extension
}}}
), or it will be interpreted as markdown. For example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 header-includes:\line
- |\line
  ```\{=latex\}\line
  \\let\\oldsection\\section\line
  \\renewcommand\{\\section\}[1]\{\\clearpage\\oldsection\{#1\}\}\line
  ```\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Backslash escapes\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 all_symbols_escapable}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Except inside a code block or inline code, any punctuation or space character preceded by a backslash will be treated literally, even if it would normally indicate formatting. Thus, for example, if one writes\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 *\\*hello\\**\par}
{\pard \ql \f0 \sa180 \li0 \fi0 one will get\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <em>*hello*</em>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 instead of\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <strong>hello</strong>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This rule is easier to remember than standard Markdown\u8217's rule, which allows only the following characters to be backslash-escaped:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 \\`*_\{\}[]()>#+-.!\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (However, if the {\f1 markdown_strict} format is used, the standard Markdown rule will be used.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A backslash-escaped space is parsed as a nonbreaking space. It will appear in TeX output as {\f1 ~} and in HTML and XML as {\f1 \\&#160;} or {\f1 \\&nbsp;}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A backslash-escaped newline (i.e.\u160?a backslash occurring at the end of a line) is parsed as a hard line break. It will appear in TeX output as {\f1 \\\\} and in HTML as {\f1 <br />}. This is a nice alternative to Markdown\u8217's \u8220"invisible\u8221" way of indicating hard line breaks using two trailing spaces on a line.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Backslash escapes do not work in verbatim contexts.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Inline formatting\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Emphasis\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To {\i emphasize} some text, surround it with {\f1 *}s or {\f1 _}, like this:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 This text is _emphasized with underscores_, and this\line
is *emphasized with asterisks*.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Double {\f1 *} or {\f1 _} produces {\b strong emphasis}:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 This is **strong emphasis** and __with underscores__.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A {\f1 *} or {\f1 _} character surrounded by spaces, or backslash-escaped, will not trigger emphasis:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 This is * not emphasized *, and \\*neither is this\\*.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 intraword_underscores}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Because {\f1 _} is sometimes used inside words and identifiers, pandoc does not interpret a {\f1 _} surrounded by alphanumeric characters as an emphasis marker. If you want to emphasize just part of a word, use {\f1 *}:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 feas*ible*, not feas*able*.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Strikeout\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 strikeout}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To strikeout a section of text with a horizontal line, begin and end it with {\f1 ~~}. Thus, for example,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 This ~~is deleted text.~~\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Superscripts and subscripts\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 superscript}, {\f1 subscript}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Superscripts may be written by surrounding the superscripted text by {\f1 ^} characters; subscripts may be written by surrounding the subscripted text by {\f1 ~} characters. Thus, for example,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 H~2~O is a liquid.  2^10^ is 1024.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The text between {\f1 ^...^} or {\f1 ~...~} may not contain spaces or newlines. If the superscripted or subscripted text contains spaces, these spaces must be escaped with backslashes. (This is to prevent accidental superscripting and subscripting through the ordinary use of {\f1 ~} and {\f1 ^}, and also bad interactions with footnotes.) Thus, if you want the letter P with \u8216'a cat\u8217' in subscripts, use {\f1 P~a\\ cat~}, not {\f1 P~a cat~}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Verbatim\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To make a short span of text verbatim, put it inside backticks:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 What is the difference between `>>=` and `>>`?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If the verbatim text includes a backtick, use double backticks:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Here is a literal backtick `` ` ``.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (The spaces after the opening backticks and before the closing backticks will be ignored.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The general rule is that a verbatim span starts with a string of consecutive backticks (optionally followed by a space) and ends with a string of the same number of backticks (optionally preceded by a space).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that backslash-escapes (and other Markdown constructs) do not work in verbatim contexts:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 This is a backslash followed by an asterisk: `\\*`.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 inline_code_attributes}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Attributes can be attached to verbatim text, just as with {\field{\*\fldinst{HYPERLINK "#fenced-code-blocks"}}{\fldrslt{\ul
fenced code blocks
}}}
:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 `<$>`\{.haskell\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Small caps\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To write small caps, use the {\f1 smallcaps} class:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [Small caps]\{.smallcaps\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Or, without the {\f1 bracketed_spans} extension:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <span class="smallcaps">Small caps</span>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For compatibility with other Markdown flavors, CSS is also supported:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <span style="font-variant:small-caps;">Small caps</span>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This will work in all output formats that support small caps.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Math\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 tex_math_dollars}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Anything between two {\f1 $} characters will be treated as TeX math. The opening {\f1 $} must have a non-space character immediately to its right, while the closing {\f1 $} must have a non-space character immediately to its left, and must not be followed immediately by a digit. Thus, {\f1 $20,000 and $30,000} won\u8217't parse as math. If for some reason you need to enclose text in literal {\f1 $} characters, backslash-escape them and they won\u8217't be treated as math delimiters.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For display math, use {\f1 $$} delimiters. (In this case, the delimiters may be separated from the formula by whitespace.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 TeX math will be printed in all output formats. How it is rendered depends on the output format:\par}
{\pard \ql \f0 \sa0 \li0 \fi0 LaTeX\par}
{\pard \ql \f0 \sa0 \li360 \fi0 It will appear verbatim surrounded by {\f1 \\(...\\)} (for inline math) or {\f1 \\[...\\]} (for display math).\par}
{\pard \ql \f0 \sa0 \li0 \fi0 Markdown, Emacs Org mode, ConTeXt, ZimWiki\par}
{\pard \ql \f0 \sa0 \li360 \fi0 It will appear verbatim surrounded by {\f1 $...$} (for inline math) or {\f1 $$...$$} (for display math).\par}
{\pard \ql \f0 \sa0 \li0 \fi0 XWiki\par}
{\pard \ql \f0 \sa0 \li360 \fi0 It will appear verbatim surrounded by {\f1 \{\{formula\}\}..\{\{/formula\}\}}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 reStructuredText\par}
{\pard \ql \f0 \sa0 \li360 \fi0 It will be rendered using an {\field{\*\fldinst{HYPERLINK "https://docutils.sourceforge.io/docs/ref/rst/roles.html#math"}}{\fldrslt{\ul
interpreted text role {\f1 :math:}
}}}
.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 AsciiDoc\par}
{\pard \ql \f0 \sa0 \li360 \fi0 For AsciiDoc output format ({\f1 -t asciidoc}) it will appear verbatim surrounded by {\f1 latexmath:[$...$]} (for inline math) or {\f1 [latexmath]++++\\[...\\]+++} (for display math). For AsciiDoctor output format ({\f1 -t asciidoctor}) the LaTex delimiters ({\f1 $..$} and {\f1 \\[..\\]}) are omitted.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 Texinfo\par}
{\pard \ql \f0 \sa0 \li360 \fi0 It will be rendered inside a {\f1 @math} command.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 roff man, Jira markup\par}
{\pard \ql \f0 \sa0 \li360 \fi0 It will be rendered verbatim without {\f1 $}\u8217's.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 MediaWiki, DokuWiki\par}
{\pard \ql \f0 \sa0 \li360 \fi0 It will be rendered inside {\f1 <math>} tags.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 Textile\par}
{\pard \ql \f0 \sa0 \li360 \fi0 It will be rendered inside {\f1 <span class="math">} tags.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 RTF, OpenDocument\par}
{\pard \ql \f0 \sa0 \li360 \fi0 It will be rendered, if possible, using Unicode characters, and will otherwise appear verbatim.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 ODT\par}
{\pard \ql \f0 \sa0 \li360 \fi0 It will be rendered, if possible, using MathML.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 DocBook\par}
{\pard \ql \f0 \sa0 \li360 \fi0 If the {\f1 --mathml} flag is used, it will be rendered using MathML in an {\f1 inlineequation} or {\f1 informalequation} tag. Otherwise it will be rendered, if possible, using Unicode characters.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 Docx\par}
{\pard \ql \f0 \sa0 \li360 \fi0 It will be rendered using OMML math markup.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 FictionBook2\par}
{\pard \ql \f0 \sa0 \li360 \fi0 If the {\f1 --webtex} option is used, formulas are rendered as images using CodeCogs or other compatible web service, downloaded and embedded in the e-book. Otherwise, they will appear verbatim.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 HTML, Slidy, DZSlides, S5, EPUB\par}
{\pard \ql \f0 \sa0 \li360 \fi0 The way math is rendered in HTML will depend on the command-line options selected. Therefore see {\field{\*\fldinst{HYPERLINK "#math-rendering-in-html"}}{\fldrslt{\ul
Math rendering in HTML
}}}
 above.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Raw HTML\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 raw_html}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Markdown allows you to insert raw HTML (or DocBook) anywhere in a document (except verbatim contexts, where {\f1 <}, {\f1 >}, and {\f1 &} are interpreted literally). (Technically this is not an extension, since standard Markdown allows it, but it has been made an extension so that it can be disabled if desired.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The raw HTML is passed through unchanged in HTML, S5, Slidy, Slideous, DZSlides, EPUB, Markdown, CommonMark, Emacs Org mode, and Textile output, and suppressed in other formats.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For a more explicit way of including raw HTML in a Markdown document, see the {\field{\*\fldinst{HYPERLINK "#extension-raw_attribute"}}{\fldrslt{\ul
{\f1 raw_attribute} extension
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In the CommonMark format, if {\f1 raw_html} is enabled, superscripts, subscripts, strikeouts and small capitals will be represented as HTML. Otherwise, plain-text fallbacks will be used. Note that even if {\f1 raw_html} is disabled, tables will be rendered with HTML syntax if they cannot use pipe syntax.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 markdown_in_html_blocks}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Standard Markdown allows you to include HTML \u8220"blocks\u8221": blocks of HTML between balanced tags that are separated from the surrounding text with blank lines, and start and end at the left margin. Within these blocks, everything is interpreted as HTML, not Markdown; so (for example), {\f1 *} does not signify emphasis.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc behaves this way when the {\f1 markdown_strict} format is used; but by default, pandoc interprets material between HTML block tags as Markdown. Thus, for example, pandoc will turn\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <table>\line
<tr>\line
<td>*one*</td>\line
<td>[a link](https://google.com)</td>\line
</tr>\line
</table>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 into\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <table>\line
<tr>\line
<td><em>one</em></td>\line
<td><a href="https://google.com">a link</a></td>\line
</tr>\line
</table>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 whereas {\f1 Markdown.pl} will preserve it as is.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 There is one exception to this rule: text between {\f1 <script>} and {\f1 <style>} tags is not interpreted as Markdown.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This departure from standard Markdown should make it easier to mix Markdown with HTML block elements. For example, one can surround a block of Markdown text with {\f1 <div>} tags without preventing it from being interpreted as Markdown.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 native_divs}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Use native pandoc {\f1 Div} blocks for content inside {\f1 <div>} tags. For the most part this should give the same output as {\f1 markdown_in_html_blocks}, but it makes it easier to write pandoc filters to manipulate groups of blocks.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 native_spans}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Use native pandoc {\f1 Span} blocks for content inside {\f1 <span>} tags. For the most part this should give the same output as {\f1 raw_html}, but it makes it easier to write pandoc filters to manipulate groups of inlines.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 raw_tex}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In addition to raw HTML, pandoc allows raw LaTeX, TeX, and ConTeXt to be included in a document. Inline TeX commands will be preserved and passed unchanged to the LaTeX and ConTeXt writers. Thus, for example, you can use LaTeX to include BibTeX citations:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 This result was proved in \\cite\{jones.1967\}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that in LaTeX environments, like\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 \\begin\{tabular\}\{|l|l|\}\\hline\line
Age & Frequency \\\\ \\hline\line
18--25  & 15 \\\\\line
26--35  & 33 \\\\\line
36--45  & 22 \\\\ \\hline\line
\\end\{tabular\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 the material between the begin and end tags will be interpreted as raw LaTeX, not as Markdown.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For a more explicit and flexible way of including raw TeX in a Markdown document, see the {\field{\*\fldinst{HYPERLINK "#extension-raw_attribute"}}{\fldrslt{\ul
{\f1 raw_attribute} extension
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Inline LaTeX is ignored in output formats other than Markdown, LaTeX, Emacs Org mode, and ConTeXt.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Generic raw attribute\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 raw_attribute}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Inline spans and fenced code blocks with a special kind of attribute will be parsed as raw content with the designated format. For example, the following produces a raw roff {\f1 ms} block:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ```\{=ms\}\line
.MYMACRO\line
blah blah\line
```\par}
{\pard \ql \f0 \sa180 \li0 \fi0 And the following produces a raw {\f1 html} inline element:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 This is `<a>html</a>`\{=html\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This can be useful to insert raw xml into {\f1 docx} documents, e.g. a pagebreak:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ```\{=openxml\}\line
<w:p>\line
  <w:r>\line
    <w:br w:type="page"/>\line
  </w:r>\line
</w:p>\line
```\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The format name should match the target format name (see {\f1 -t/--to}, above, for a list, or use {\f1 pandoc --list-output-formats}). Use {\f1 openxml} for {\f1 docx} output, {\f1 opendocument} for {\f1 odt} output, {\f1 html5} for {\f1 epub3} output, {\f1 html4} for {\f1 epub2} output, and {\f1 latex}, {\f1 beamer}, {\f1 ms}, or {\f1 html5} for {\f1 pdf} output (depending on what you use for {\f1 --pdf-engine}).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This extension presupposes that the relevant kind of inline code or fenced code block is enabled. Thus, for example, to use a raw attribute with a backtick code block, {\f1 backtick_code_blocks} must be enabled.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The raw attribute cannot be combined with regular attributes.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 LaTeX macros\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 latex_macros}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When this extension is enabled, pandoc will parse LaTeX macro definitions and apply the resulting macros to all LaTeX math and raw LaTeX. So, for example, the following will work in all output formats, not just LaTeX:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 \\newcommand\{\\tuple\}[1]\{\\langle #1 \\rangle\}\line
\line
$\\tuple\{a, b, c\}$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that LaTeX macros will not be applied if they occur inside a raw span or block marked with the {\field{\*\fldinst{HYPERLINK "#extension-raw_attribute"}}{\fldrslt{\ul
{\f1 raw_attribute} extension
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When {\f1 latex_macros} is disabled, the raw LaTeX and math will not have macros applied. This is usually a better approach when you are targeting LaTeX or PDF.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Macro definitions in LaTeX will be passed through as raw LaTeX only if {\f1 latex_macros} is not enabled. Macro definitions in Markdown source (or other formats allowing {\f1 raw_tex}) will be passed through regardless of whether {\f1 latex_macros} is enabled.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Links\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Markdown allows links to be specified in several ways.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Automatic links\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you enclose a URL or email address in pointy brackets, it will become a link:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <https://google.com>\line
<sam@green.eggs.ham>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Inline links\par}
{\pard \ql \f0 \sa180 \li0 \fi0 An inline link consists of the link text in square brackets, followed by the URL in parentheses. (Optionally, the URL can be followed by a link title, in quotes.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 This is an [inline link](/url), and here's [one with\line
a title](https://fsf.org "click here for a good time!").\par}
{\pard \ql \f0 \sa180 \li0 \fi0 There can be no space between the bracketed part and the parenthesized part. The link text can contain formatting (such as emphasis), but the title cannot.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Email addresses in inline links are not autodetected, so they have to be prefixed with {\f1 mailto}:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [Write me!](mailto:sam@green.eggs.ham)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Reference links\par}
{\pard \ql \f0 \sa180 \li0 \fi0 An {\i explicit} reference link has two parts, the link itself and the link definition, which may occur elsewhere in the document (either before or after the link).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The link consists of link text in square brackets, followed by a label in square brackets. (There cannot be space between the two unless the {\f1 spaced_reference_links} extension is enabled.) The link definition consists of the bracketed label, followed by a colon and a space, followed by the URL, and optionally (after a space) a link title either in quotes or in parentheses. The label must not be parseable as a citation (assuming the {\f1 citations} extension is enabled): citations take precedence over link labels.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Here are some examples:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [my label 1]: /foo/bar.html  "My title, optional"\line
[my label 2]: /foo\line
[my label 3]: https://fsf.org (The free software foundation)\line
[my label 4]: /bar#special  'A title in single quotes'\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The URL may optionally be surrounded by angle brackets:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [my label 5]: <http://foo.bar.baz>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The title may go on the next line:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [my label 3]: https://fsf.org\line
  "The free software foundation"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that link labels are not case sensitive. So, this will work:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Here is [my link][FOO]\line
\line
[Foo]: /bar/baz\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In an {\i implicit} reference link, the second pair of brackets is empty:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 See [my website][].\line
\line
[my website]: http://foo.bar.baz\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note: In {\f1 Markdown.pl} and most other Markdown implementations, reference link definitions cannot occur in nested constructions such as list items or block quotes. Pandoc lifts this arbitrary seeming restriction. So the following is fine in pandoc, though not in most other implementations:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 > My block [quote].\line
>\line
> [quote]: /foo\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 shortcut_reference_links}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In a {\i shortcut} reference link, the second pair of brackets may be omitted entirely:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 See [my website].\line
\line
[my website]: http://foo.bar.baz\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Internal links\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To link to another section of the same document, use the automatically generated identifier (see {\field{\*\fldinst{HYPERLINK "#heading-identifiers"}}{\fldrslt{\ul
Heading identifiers
}}}
). For example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 See the [Introduction](#introduction).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 or\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 See the [Introduction].\line
\line
[Introduction]: #introduction\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Internal links are currently supported for HTML formats (including HTML slide shows and EPUB), LaTeX, and ConTeXt.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Images\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A link immediately preceded by a {\f1 !} will be treated as an image. The link text will be used as the image\u8217's alt text:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ![la lune](lalune.jpg "Voyage to the moon")\line
\line
![movie reel]\line
\line
[movie reel]: movie.gif\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 implicit_figures}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 An image with nonempty alt text, occurring by itself in a paragraph, will be rendered as a figure with a caption. The image\u8217's alt text will be used as the caption.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ![This is the caption](/url/of/image.png)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 How this is rendered depends on the output format. Some output formats (e.g.\u160?RTF) do not yet support figures. In those formats, you\u8217'll just get an image in a paragraph by itself, with no caption.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you just want a regular inline image, just make sure it is not the only thing in the paragraph. One way to do this is to insert a nonbreaking space after the image:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ![This image won't be a figure](/url/of/image.png)\\\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that in reveal.js slide shows, an image in a paragraph by itself that has the {\f1 stretch} class will fill the screen, and the caption and figure tags will be omitted.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 link_attributes}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Attributes can be set on links and images:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 An inline ![image](foo.jpg)\{#id .class width=30 height=20px\}\line
and a reference ![image][ref] with attributes.\line
\line
[ref]: foo.jpg "optional title" \{#id .class key=val key2="val 2"\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (This syntax is compatible with {\field{\*\fldinst{HYPERLINK "https://michelf.ca/projects/php-markdown/extra/"}}{\fldrslt{\ul
PHP Markdown Extra
}}}
 when only {\f1 #id} and {\f1 .class} are used.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For HTML and EPUB, all known HTML5 attributes except {\f1 width} and {\f1 height} (but including {\f1 srcset} and {\f1 sizes}) are passed through as is. Unknown attributes are passed through as custom attributes, with {\f1 data-} prepended. The other writers ignore attributes that are not specifically supported by their output format.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The {\f1 width} and {\f1 height} attributes on images are treated specially. When used without a unit, the unit is assumed to be pixels. However, any of the following unit identifiers can be used: {\f1 px}, {\f1 cm}, {\f1 mm}, {\f1 in}, {\f1 inch} and {\f1 %}. There must not be any spaces between the number and the unit. For example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ![](file.jpg)\{ width=50% \}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Dimensions are converted to inches for output in page-based formats like LaTeX. Dimensions are converted to pixels for output in HTML-like formats. Use the {\f1 --dpi} option to specify the number of pixels per inch. The default is 96dpi.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab The {\f1 %} unit is generally relative to some available space. For example the above example will render to the following.\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab HTML: {\f1 <img href="file.jpg" style="width: 50%;" />}\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab LaTeX: {\f1 \\includegraphics[width=0.5\\textwidth,height=\\textheight]\{file.jpg\}} (If you\u8217're using a custom template, you need to configure {\f1 graphicx} as in the default template.)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab ConTeXt: {\f1 \\externalfigure[file.jpg][width=0.5\\textwidth]}\sa180\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Some output formats have a notion of a class ({\field{\*\fldinst{HYPERLINK "https://wiki.contextgarden.net/Using_Graphics#Multiple_Image_Settings"}}{\fldrslt{\ul
ConTeXt
}}}
) or a unique identifier (LaTeX {\f1 \\caption}), or both (HTML).\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab When no {\f1 width} or {\f1 height} attributes are specified, the fallback is to look at the image resolution and the dpi metadata embedded in the image file.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Divs and Spans\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Using the {\f1 native_divs} and {\f1 native_spans} extensions (see {\field{\*\fldinst{HYPERLINK "#extension-native_divs"}}{\fldrslt{\ul
above
}}}
), HTML syntax can be used as part of markdown to create native {\f1 Div} and {\f1 Span} elements in the pandoc AST (as opposed to raw HTML). However, there is also nicer syntax available:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 fenced_divs}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Allow special fenced syntax for native {\f1 Div} blocks. A Div starts with a fence containing at least three consecutive colons plus some attributes. The attributes may optionally be followed by another string of consecutive colons. The attribute syntax is exactly as in fenced code blocks (see {\field{\*\fldinst{HYPERLINK "#extension-fenced_code_attributes"}}{\fldrslt{\ul
Extension: {\f1 fenced_code_attributes}
}}}
). As with fenced code blocks, one can use either attributes in curly braces or a single unbraced word, which will be treated as a class name. The Div ends with another line containing a string of at least three consecutive colons. The fenced Div should be separated by blank lines from preceding and following blocks.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ::::: \{#special .sidebar\}\line
Here is a paragraph.\line
\line
And another.\line
:::::\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Fenced divs can be nested. Opening fences are distinguished because they {\i must} have attributes:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ::: Warning ::::::\line
This is a warning.\line
\line
::: Danger\line
This is a warning within a warning.\line
:::\line
::::::::::::::::::\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Fences without attributes are always closing fences. Unlike with fenced code blocks, the number of colons in the closing fence need not match the number in the opening fence. However, it can be helpful for visual clarity to use fences of different lengths to distinguish nested divs from their parents.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 bracketed_spans}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A bracketed sequence of inlines, as one would use to begin a link, will be treated as a {\f1 Span} with attributes if it is followed immediately by attributes:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [This is *some text*]\{.class key="val"\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Footnotes\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 footnotes}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc\u8217's Markdown allows footnotes, using the following syntax:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Here is a footnote reference,[^1] and another.[^longnote]\line
\line
[^1]: Here is the footnote.\line
\line
[^longnote]: Here's one with multiple blocks.\line
\line
    Subsequent paragraphs are indented to show that they\line
belong to the previous footnote.\line
\line
        \{ some.code \}\line
\line
    The whole paragraph can be indented, or just the first\line
    line.  In this way, multi-paragraph footnotes work like\line
    multi-paragraph list items.\line
\line
This paragraph won't be part of the note, because it\line
isn't indented.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The identifiers in footnote references may not contain spaces, tabs, or newlines. These identifiers are used only to correlate the footnote reference with the note itself; in the output, footnotes will be numbered sequentially.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The footnotes themselves need not be placed at the end of the document. They may appear anywhere except inside other block elements (lists, block quotes, tables, etc.). Each footnote should be separated from surrounding content (including other footnotes) by blank lines.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 inline_notes}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Inline footnotes are also allowed (though, unlike regular notes, they cannot contain multiple paragraphs). The syntax is as follows:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Here is an inline note.^[Inlines notes are easier to write, since\line
you don't have to pick an identifier and move down to type the\line
note.]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Inline and regular footnotes may be mixed freely.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Citations\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 citations}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Using an external filter, {\f1 pandoc-citeproc}, pandoc can automatically generate citations and a bibliography in a number of styles. Basic usage is\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc --filter pandoc-citeproc myinput.txt\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In order to use this feature, you will need to specify a bibliography file using the {\f1 bibliography} metadata field in a YAML metadata section, or {\f1 --bibliography} command line argument. You can supply multiple {\f1 --bibliography} arguments or set {\f1 bibliography} metadata field to YAML array, if you want to use multiple bibliography files. The bibliography may have any of these formats:\par}
{
\trowd \trgaph120
\clbrdrb\brdrs\cellx4320\clbrdrb\brdrs\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 Format\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 File extension\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 BibLaTeX\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 .bib\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 BibTeX\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 .bibtex\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 Copac\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 .copac\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 CSL JSON\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 .json\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 CSL YAML\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 .yaml\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 EndNote\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 .enl\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 EndNote XML\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 .xml\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 ISI\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 .wos\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 MEDLINE\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 .medline\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 MODS\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 .mods\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 RIS\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 .ris\par}
\cell}
}
\intbl\row}
{\pard \ql \f0 \sa180 \li0 \fi0 \par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that {\f1 .bib} can be used with both BibTeX and BibLaTeX files; use {\f1 .bibtex} to force BibTeX.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that {\f1 pandoc-citeproc --bib2json} and {\f1 pandoc-citeproc --bib2yaml} can produce {\f1 .json} and {\f1 .yaml} files from any of the supported formats.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In-field markup: In BibTeX and BibLaTeX databases, pandoc-citeproc parses a subset of LaTeX markup; in CSL YAML databases, pandoc Markdown; and in CSL JSON databases, an {\field{\*\fldinst{HYPERLINK "https://docs.citationstyles.org/en/1.0/release-notes.html#rich-text-markup-within-fields"}}{\fldrslt{\ul
HTML-like markup
}}}
:\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 <i>...</i>}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 italics\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 <b>...</b>}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 bold\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 <span style="font-variant:small-caps;">...</span>} or {\f1 <sc>...</sc>}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 small capitals\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 <sub>...</sub>}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 subscript\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 <sup>...</sup>}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 superscript\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 <span class="nocase">...</span>}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 prevent a phrase from being capitalized as title case\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\f1 pandoc-citeproc -j} and {\f1 -y} interconvert the CSL JSON and CSL YAML formats as far as possible.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 As an alternative to specifying a bibliography file using {\f1 --bibliography} or the YAML metadata field {\f1 bibliography}, you can include the citation data directly in the {\f1 references} field of the document\u8217's YAML metadata. The field should contain an array of YAML-encoded references, for example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ---\line
references:\line
- type: article-journal\line
  id: WatsonCrick1953\line
  author:\line
  - family: Watson\line
    given: J. D.\line
  - family: Crick\line
    given: F. H. C.\line
  issued:\line
    date-parts:\line
    - - 1953\line
      - 4\line
      - 25\line
  title: 'Molecular structure of nucleic acids: a structure for deoxyribose\line
    nucleic acid'\line
  title-short: Molecular structure of nucleic acids\line
  container-title: Nature\line
  volume: 171\line
  issue: 4356\line
  page: 737-738\line
  DOI: 10.1038/171737a0\line
  URL: https://www.nature.com/articles/171737a0\line
  language: en-GB\line
...\par}
{\pard \ql \f0 \sa180 \li0 \fi0 ({\f1 pandoc-citeproc --bib2yaml} can produce these from a bibliography file in one of the supported formats.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Citations and references can be formatted using any style supported by the {\field{\*\fldinst{HYPERLINK "https://citationstyles.org"}}{\fldrslt{\ul
Citation Style Language
}}}
, listed in the {\field{\*\fldinst{HYPERLINK "https://www.zotero.org/styles"}}{\fldrslt{\ul
Zotero Style Repository
}}}
. These files are specified using the {\f1 --csl} option or the {\f1 csl} metadata field. By default, {\f1 pandoc-citeproc} will use the {\field{\*\fldinst{HYPERLINK "https://chicagomanualofstyle.org"}}{\fldrslt{\ul
Chicago Manual of Style
}}}
 author-date format. The CSL project provides further information on {\field{\*\fldinst{HYPERLINK "https://citationstyles.org/authors/"}}{\fldrslt{\ul
finding and editing styles
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To make your citations hyperlinks to the corresponding bibliography entries, add {\f1 link-citations: true} to your YAML metadata.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Citations go inside square brackets and are separated by semicolons. Each citation must have a key, composed of \u8216'@\u8217' + the citation identifier from the database, and may optionally have a prefix, a locator, and a suffix. The citation key must begin with a letter, digit, or {\f1 _}, and may contain alphanumerics, {\f1 _}, and internal punctuation characters ({\f1 :.#$%&-+?<>~/}). Here are some examples:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Blah blah [see @doe99, pp. 33-35; also @smith04, chap. 1].\line
\line
Blah blah [@doe99, pp. 33-35, 38-39 and *passim*].\line
\line
Blah blah [@smith04; @doe99].\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\f1 pandoc-citeproc} detects locator terms in the {\field{\*\fldinst{HYPERLINK "https://github.com/citation-style-language/locales"}}{\fldrslt{\ul
CSL locale files
}}}
. Either abbreviated or unabbreviated forms are accepted. In the {\f1 en-US} locale, locator terms can be written in either singular or plural forms, as {\f1 book}, {\f1 bk.}/{\f1 bks.}; {\f1 chapter}, {\f1 chap.}/{\f1 chaps.}; {\f1 column}, {\f1 col.}/{\f1 cols.}; {\f1 figure}, {\f1 fig.}/{\f1 figs.}; {\f1 folio}, {\f1 fol.}/{\f1 fols.}; {\f1 number}, {\f1 no.}/{\f1 nos.}; {\f1 line}, {\f1 l.}/{\f1 ll.}; {\f1 note}, {\f1 n.}/{\f1 nn.}; {\f1 opus}, {\f1 op.}/{\f1 opp.}; {\f1 page}, {\f1 p.}/{\f1 pp.}; {\f1 paragraph}, {\f1 para.}/{\f1 paras.}; {\f1 part}, {\f1 pt.}/{\f1 pts.}; {\f1 section}, {\f1 sec.}/{\f1 secs.}; {\f1 sub verbo}, {\f1 s.v.}/{\f1 s.vv.}; {\f1 verse}, {\f1 v.}/{\f1 vv.}; {\f1 volume}, {\f1 vol.}/{\f1 vols.}; {\f1 \u182?}/{\f1 \u182?\u182?}; {\f1 \u167?}/{\f1 \u167?\u167?}. If no locator term is used, \u8220"page\u8221" is assumed.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\f1 pandoc-citeproc} will use heuristics to distinguish the locator from the suffix. In complex cases, the locator can be enclosed in curly braces (using {\f1 pandoc-citeproc} 0.15 and higher only):\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [@smith\{ii, A, D-Z\}, with a suffix]\line
[@smith, \{pp. iv, vi-xi, (xv)-(xvii)\} with suffix here]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A minus sign ({\f1 -}) before the {\f1 @} will suppress mention of the author in the citation. This can be useful when the author is already mentioned in the text:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Smith says blah [-@smith04].\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You can also write an in-text citation, as follows:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 @smith04 says blah.\line
\line
@smith04 [p. 33] says blah.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If the style calls for a list of works cited, it will be placed in a div with id {\f1 refs}, if one exists:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ::: \{#refs\}\line
:::\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Otherwise, it will be placed at the end of the document. Generation of the bibliography can be suppressed by setting {\f1 suppress-bibliography: true} in the YAML metadata.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you wish the bibliography to have a section heading, you can set {\f1 reference-section-title} in the metadata, or put the heading at the beginning of the div with id {\f1 refs} (if you are using it) or at the end of your document:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 last paragraph...\line
\line
# References\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The bibliography will be inserted after this heading. Note that the {\f1 unnumbered} class will be added to this heading, so that the section will not be numbered.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you want to include items in the bibliography without actually citing them in the body text, you can define a dummy {\f1 nocite} metadata field and put the citations there:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ---\line
nocite: |\line
  @item1, @item2\line
...\line
\line
@item3\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In this example, the document will contain a citation for {\f1 item3} only, but the bibliography will contain entries for {\f1 item1}, {\f1 item2}, and {\f1 item3}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 It is possible to create a bibliography with all the citations, whether or not they appear in the document, by using a wildcard:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ---\line
nocite: |\line
  @*\line
...\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For LaTeX output, you can also use {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/natbib"}}{\fldrslt{\ul
{\f1 natbib}
}}}
 or {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/biblatex"}}{\fldrslt{\ul
{\f1 biblatex}
}}}
 to render the bibliography. In order to do so, specify bibliography files as outlined above, and add {\f1 --natbib} or {\f1 --biblatex} argument to {\f1 pandoc} invocation. Bear in mind that bibliography files have to be in respective format (either BibTeX or BibLaTeX).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For more information, see the {\field{\*\fldinst{HYPERLINK "https://github.com/jgm/pandoc-citeproc/blob/master/man/pandoc-citeproc.1.md"}}{\fldrslt{\ul
pandoc-citeproc man page
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Non-pandoc extensions\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The following Markdown syntax extensions are not enabled by default in pandoc, but may be enabled by adding {\f1 +EXTENSION} to the format name, where {\f1 EXTENSION} is the name of the extension. Thus, for example, {\f1 markdown+hard_line_breaks} is Markdown with hard line breaks.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 old_dashes}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Selects the pandoc <= 1.8.2.1 behavior for parsing smart dashes: {\f1 -} before a numeral is an en-dash, and {\f1 --} is an em-dash. This option only has an effect if {\f1 smart} is enabled. It is selected automatically for {\f1 textile} input.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 angle_brackets_escapable}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Allow {\f1 <} and {\f1 >} to be backslash-escaped, as they can be in GitHub flavored Markdown but not original Markdown. This is implied by pandoc\u8217's default {\f1 all_symbols_escapable}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 lists_without_preceding_blankline}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Allow a list to occur right after a paragraph, with no intervening blank space.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 four_space_rule}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Selects the pandoc <= 2.0 behavior for parsing lists, so that four spaces indent are needed for list item continuation paragraphs.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 spaced_reference_links}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Allow whitespace between the two components of a reference link, for example,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [foo] [bar].\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 hard_line_breaks}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Causes all newlines within a paragraph to be interpreted as hard line breaks instead of spaces.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 ignore_line_breaks}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Causes newlines within a paragraph to be ignored, rather than being treated as spaces or as hard line breaks. This option is intended for use with East Asian languages where spaces are not used between words, but text is divided into lines for readability.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 east_asian_line_breaks}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Causes newlines within a paragraph to be ignored, rather than being treated as spaces or as hard line breaks, when they occur between two East Asian wide characters. This is a better choice than {\f1 ignore_line_breaks} for texts that include a mix of East Asian wide characters and other characters.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 emoji}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Parses textual emojis like {\f1 :smile:} as Unicode emoticons.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 tex_math_single_backslash}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Causes anything between {\f1 \\(} and {\f1 \\)} to be interpreted as inline TeX math, and anything between {\f1 \\[} and {\f1 \\]} to be interpreted as display TeX math. Note: a drawback of this extension is that it precludes escaping {\f1 (} and {\f1 [}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 tex_math_double_backslash}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Causes anything between {\f1 \\\\(} and {\f1 \\\\)} to be interpreted as inline TeX math, and anything between {\f1 \\\\[} and {\f1 \\\\]} to be interpreted as display TeX math.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 markdown_attribute}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 By default, pandoc interprets material inside block-level tags as Markdown. This extension changes the behavior so that Markdown is only parsed inside block-level tags if the tags have the attribute {\f1 markdown=1}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 mmd_title_block}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Enables a {\field{\*\fldinst{HYPERLINK "https://fletcherpenney.net/multimarkdown/"}}{\fldrslt{\ul
MultiMarkdown
}}}
 style title block at the top of the document, for example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Title:   My title\line
Author:  John Doe\line
Date:    September 1, 2008\line
Comment: This is a sample mmd title block, with\line
         a field spanning multiple lines.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 See the MultiMarkdown documentation for details. If {\f1 pandoc_title_block} or {\f1 yaml_metadata_block} is enabled, it will take precedence over {\f1 mmd_title_block}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 abbreviations}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Parses PHP Markdown Extra abbreviation keys, like\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 *[HTML]: Hypertext Markup Language\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that the pandoc document model does not support abbreviations, so if this extension is enabled, abbreviation keys are simply skipped (as opposed to being parsed as paragraphs).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 autolink_bare_uris}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Makes all absolute URIs into links, even when not surrounded by pointy braces {\f1 <...>}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 mmd_link_attributes}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Parses multimarkdown style key-value attributes on link and image references. This extension should not be confused with the {\field{\*\fldinst{HYPERLINK "#extension-link_attributes"}}{\fldrslt{\ul
{\f1 link_attributes}
}}}
 extension.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 This is a reference ![image][ref] with multimarkdown attributes.\line
\line
[ref]: https://path.to/image "Image title" width=20px height=30px\line
       id=myId class="myClass1 myClass2"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 mmd_header_identifiers}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Parses multimarkdown style heading identifiers (in square brackets, after the heading but before any trailing {\f1 #}s in an ATX heading).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 compact_definition_lists}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Activates the definition list syntax of pandoc 1.12.x and earlier. This syntax differs from the one described above under {\field{\*\fldinst{HYPERLINK "#definition-lists"}}{\fldrslt{\ul
Definition lists
}}}
 in several respects:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab No blank line is required between consecutive items of the definition list.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab To get a \u8220"tight\u8221" or \u8220"compact\u8221" list, omit space between consecutive items; the space between a term and its definition does not affect anything.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Lazy wrapping of paragraphs is not allowed: the entire definition must be indented four spaces.{\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 To see why laziness is incompatible with relaxing the requirement of a blank line between items, consider the following example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 bar\line
:    definition\line
foo\line
:    definition\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Is this a single list item with two definitions of \u8220"bar,\u8221" the first of which is lazily wrapped, or two list items? To remove the ambiguity we must either disallow lazy wrapping or require a blank line between list items.\par}
}\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Extension: {\f1 gutenberg}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Use {\field{\*\fldinst{HYPERLINK "https://www.gutenberg.org"}}{\fldrslt{\ul
Project Gutenberg
}}}
 conventions for {\f1 plain} output: all-caps for strong emphasis, surround by underscores for regular emphasis, add extra blank space around headings.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Markdown variants\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In addition to pandoc\u8217's extended Markdown, the following Markdown variants are supported:\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 markdown_phpextra} (PHP Markdown Extra)\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 footnotes}, {\f1 pipe_tables}, {\f1 raw_html}, {\f1 markdown_attribute}, {\f1 fenced_code_blocks}, {\f1 definition_lists}, {\f1 intraword_underscores}, {\f1 header_attributes}, {\f1 link_attributes}, {\f1 abbreviations}, {\f1 shortcut_reference_links}, {\f1 spaced_reference_links}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 markdown_github} (deprecated GitHub-Flavored Markdown)\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 pipe_tables}, {\f1 raw_html}, {\f1 fenced_code_blocks}, {\f1 auto_identifiers}, {\f1 gfm_auto_identifiers}, {\f1 backtick_code_blocks}, {\f1 autolink_bare_uris}, {\f1 space_in_atx_header}, {\f1 intraword_underscores}, {\f1 strikeout}, {\f1 task_lists}, {\f1 emoji}, {\f1 shortcut_reference_links}, {\f1 angle_brackets_escapable}, {\f1 lists_without_preceding_blankline}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 markdown_mmd} (MultiMarkdown)\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 pipe_tables}, {\f1 raw_html}, {\f1 markdown_attribute}, {\f1 mmd_link_attributes}, {\f1 tex_math_double_backslash}, {\f1 intraword_underscores}, {\f1 mmd_title_block}, {\f1 footnotes}, {\f1 definition_lists}, {\f1 all_symbols_escapable}, {\f1 implicit_header_references}, {\f1 auto_identifiers}, {\f1 mmd_header_identifiers}, {\f1 shortcut_reference_links}, {\f1 implicit_figures}, {\f1 superscript}, {\f1 subscript}, {\f1 backtick_code_blocks}, {\f1 spaced_reference_links}, {\f1 raw_attribute}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 markdown_strict} (Markdown.pl)\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 raw_html}, {\f1 shortcut_reference_links}, {\f1 spaced_reference_links}.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We also support {\f1 commonmark} and {\f1 gfm} (GitHub-Flavored Markdown, which is implemented as a set of extensions on {\f1 commonmark}).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note, however, that {\f1 commonmark} and {\f1 gfm} have limited support for extensions. Only those listed below (and {\f1 smart}, {\f1 raw_tex}, and {\f1 hard_line_breaks}) will work. The extensions can, however, all be individually disabled. Also, {\f1 raw_tex} only affects {\f1 gfm} output, not input.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 gfm} (GitHub-Flavored Markdown)\par}
{\pard \ql \f0 \sa0 \li360 \fi0 {\f1 pipe_tables}, {\f1 raw_html}, {\f1 fenced_code_blocks}, {\f1 auto_identifiers}, {\f1 gfm_auto_identifiers}, {\f1 backtick_code_blocks}, {\f1 autolink_bare_uris}, {\f1 space_in_atx_header}, {\f1 intraword_underscores}, {\f1 strikeout}, {\f1 task_lists}, {\f1 emoji}, {\f1 shortcut_reference_links}, {\f1 angle_brackets_escapable}, {\f1 lists_without_preceding_blankline}.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Producing slide shows with pandoc\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You can use pandoc to produce an HTML + JavaScript slide presentation that can be viewed via a web browser. There are five ways to do this, using {\field{\*\fldinst{HYPERLINK "https://meyerweb.com/eric/tools/s5/"}}{\fldrslt{\ul
S5
}}}
, {\field{\*\fldinst{HYPERLINK "http://paulrouget.com/dzslides/"}}{\fldrslt{\ul
DZSlides
}}}
, {\field{\*\fldinst{HYPERLINK "https://www.w3.org/Talks/Tools/Slidy2/"}}{\fldrslt{\ul
Slidy
}}}
, {\field{\*\fldinst{HYPERLINK "https://goessner.net/articles/slideous/"}}{\fldrslt{\ul
Slideous
}}}
, or {\field{\*\fldinst{HYPERLINK "https://revealjs.com/"}}{\fldrslt{\ul
reveal.js
}}}
. You can also produce a PDF slide show using LaTeX {\field{\*\fldinst{HYPERLINK "https://ctan.org/pkg/beamer"}}{\fldrslt{\ul
{\f1 beamer}
}}}
, or slides shows in Microsoft {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Microsoft_PowerPoint"}}{\fldrslt{\ul
PowerPoint
}}}
 format.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Here\u8217's the Markdown source for a simple slide show, {\f1 habits.txt}:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 % Habits\line
% John Doe\line
% March 22, 2005\line
\line
# In the morning\line
\line
## Getting up\line
\line
- Turn off alarm\line
- Get out of bed\line
\line
## Breakfast\line
\line
- Eat eggs\line
- Drink coffee\line
\line
# In the evening\line
\line
## Dinner\line
\line
- Eat spaghetti\line
- Drink wine\line
\line
------------------\line
\line
![picture of spaghetti](images/spaghetti.jpg)\line
\line
## Going to sleep\line
\line
- Get in bed\line
- Count sheep\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To produce an HTML/JavaScript slide show, simply type\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -t FORMAT -s habits.txt -o habits.html\par}
{\pard \ql \f0 \sa180 \li0 \fi0 where {\f1 FORMAT} is either {\f1 s5}, {\f1 slidy}, {\f1 slideous}, {\f1 dzslides}, or {\f1 revealjs}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For Slidy, Slideous, reveal.js, and S5, the file produced by pandoc with the {\f1 -s/--standalone} option embeds a link to JavaScript and CSS files, which are assumed to be available at the relative path {\f1 s5/default} (for S5), {\f1 slideous} (for Slideous), {\f1 reveal.js} (for reveal.js), or at the Slidy website at {\f1 w3.org} (for Slidy). (These paths can be changed by setting the {\f1 slidy-url}, {\f1 slideous-url}, {\f1 revealjs-url}, or {\f1 s5-url} variables; see {\field{\*\fldinst{HYPERLINK "#variables-for-html-slides"}}{\fldrslt{\ul
Variables for HTML slides
}}}
, above.) For DZSlides, the (relatively short) JavaScript and CSS are included in the file by default.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 With all HTML slide formats, the {\f1 --self-contained} option can be used to produce a single file that contains all of the data necessary to display the slide show, including linked scripts, stylesheets, images, and videos.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To produce a PDF slide show using beamer, type\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -t beamer habits.txt -o habits.pdf\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that a reveal.js slide show can also be converted to a PDF by printing it to a file from the browser.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To produce a Powerpoint slide show, type\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc habits.txt -o habits.pptx\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Structuring the slide show\par}
{\pard \ql \f0 \sa180 \li0 \fi0 By default, the {\i slide level} is the highest heading level in the hierarchy that is followed immediately by content, and not another heading, somewhere in the document. In the example above, level-1 headings are always followed by level-2 headings, which are followed by content, so the slide level is 2. This default can be overridden using the {\f1 --slide-level} option.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The document is carved up into slides according to the following rules:\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab A horizontal rule always starts a new slide.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab A heading at the slide level always starts a new slide.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Headings {\i below} the slide level in the hierarchy create headings {\i within} a slide.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Headings {\i above} the slide level in the hierarchy create \u8220"title slides,\u8221" which just contain the section title and help to break the slide show into sections. Non-slide content under these headings will be included on the title slide (for HTML slide shows) or in a subsequent slide with the same title (for beamer).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab A title page is constructed automatically from the document\u8217's title block, if present. (In the case of beamer, this can be disabled by commenting out some lines in the default template.)\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 These rules are designed to support many different styles of slide show. If you don\u8217't care about structuring your slides into sections and subsections, you can just use level-1 headings for all each slide. (In that case, level-1 will be the slide level.) But you can also structure the slide show into sections, as in the example above.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note: in reveal.js slide shows, if slide level is 2, a two-dimensional layout will be produced, with level-1 headings building horizontally and level-2 headings building vertically. It is not recommended that you use deeper nesting of section levels with reveal.js.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Incremental lists\par}
{\pard \ql \f0 \sa180 \li0 \fi0 By default, these writers produce lists that display \u8220"all at once.\u8221" If you want your lists to display incrementally (one item at a time), use the {\f1 -i} option. If you want a particular list to depart from the default, put it in a {\f1 div} block with class {\f1 incremental} or {\f1 nonincremental}. So, for example, using the {\f1 fenced div} syntax, the following would be incremental regardless of the document default:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ::: incremental\line
\line
- Eat spaghetti\line
- Drink wine\line
\line
:::\par}
{\pard \ql \f0 \sa180 \li0 \fi0 or\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ::: nonincremental\line
\line
- Eat spaghetti\line
- Drink wine\line
\line
:::\par}
{\pard \ql \f0 \sa180 \li0 \fi0 While using {\f1 incremental} and {\f1 nonincremental} divs are the recommended method of setting incremental lists on a per-case basis, an older method is also supported: putting lists inside a blockquote will depart from the document default (that is, it will display incrementally without the {\f1 -i} option and all at once with the {\f1 -i} option):\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 > - Eat spaghetti\line
> - Drink wine\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Both methods allow incremental and nonincremental lists to be mixed in a single document.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note: Neither the {\f1 -i/--incremental} option nor any of the methods described here currently works for PowerPoint output.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Inserting pauses\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You can add \u8220"pauses\u8221" within a slide by including a paragraph containing three dots, separated by spaces:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Slide with a pause\line
\line
content before the pause\line
\line
. . .\line
\line
content after the pause\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note: this feature is not yet implemented for PowerPoint output.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Styling the slides\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You can change the style of HTML slides by putting customized CSS files in {\f1 $DATADIR/s5/default} (for S5), {\f1 $DATADIR/slidy} (for Slidy), or {\f1 $DATADIR/slideous} (for Slideous), where {\f1 $DATADIR} is the user data directory (see {\f1 --data-dir}, above). The originals may be found in pandoc\u8217's system data directory (generally {\f1 $CABALDIR/pandoc-VERSION/s5/default}). Pandoc will look there for any files it does not find in the user data directory.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For dzslides, the CSS is included in the HTML file itself, and may be modified there.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 All {\field{\*\fldinst{HYPERLINK "https://github.com/hakimel/reveal.js#configuration"}}{\fldrslt{\ul
reveal.js configuration options
}}}
 can be set through variables. For example, themes can be used by setting the {\f1 theme} variable:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 -V theme=moon\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Or you can specify a custom stylesheet using the {\f1 --css} option.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To style beamer slides, you can specify a {\f1 theme}, {\f1 colortheme}, {\f1 fonttheme}, {\f1 innertheme}, and {\f1 outertheme}, using the {\f1 -V} option:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -t beamer habits.txt -V theme:Warsaw -o habits.pdf\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that heading attributes will turn into slide attributes (on a {\f1 <div>} or {\f1 <section>}) in HTML slide formats, allowing you to style individual slides. In beamer, the only heading attribute that affects slides is the {\f1 allowframebreaks} class, which sets the {\f1 allowframebreaks} option, causing multiple slides to be created if the content overfills the frame. This is recommended especially for bibliographies:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # References \{.allowframebreaks\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Speaker notes\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Speaker notes are supported in reveal.js and PowerPoint (pptx) output. You can add notes to your Markdown document thus:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ::: notes\line
\line
This is my note.\line
\line
- It can contain Markdown\line
- like this list\line
\line
:::\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To show the notes window in reveal.js, press {\f1 s} while viewing the presentation. Speaker notes in PowerPoint will be available, as usual, in handouts and presenter view.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Notes are not yet supported for other slide formats, but the notes will not appear on the slides themselves.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Columns\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To put material in side by side columns, you can use a native div container with class {\f1 columns}, containing two or more div containers with class {\f1 column} and a {\f1 width} attribute:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 :::::::::::::: \{.columns\}\line
::: \{.column width="40%"\}\line
contents...\line
:::\line
::: \{.column width="60%"\}\line
contents...\line
:::\line
::::::::::::::\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Frame attributes in beamer\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Sometimes it is necessary to add the LaTeX {\f1 [fragile]} option to a frame in beamer (for example, when using the {\f1 minted} environment). This can be forced by adding the {\f1 fragile} class to the heading introducing the slide:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Fragile slide \{.fragile\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 All of the other frame attributes described in Section 8.1 of the {\field{\*\fldinst{HYPERLINK "http://mirrors.ctan.org/macros/latex/contrib/beamer/doc/beameruserguide.pdf"}}{\fldrslt{\ul
Beamer User\u8217's Guide
}}}
 may also be used: {\f1 allowdisplaybreaks}, {\f1 allowframebreaks}, {\f1 b}, {\f1 c}, {\f1 t}, {\f1 environment}, {\f1 label}, {\f1 plain}, {\f1 shrink}, {\f1 standout}, {\f1 noframenumbering}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Background in reveal.js and beamer\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Background images can be added to self-contained reveal.js slideshows and to beamer slideshows.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For the same image on every slide, use the configuration option {\f1 background-image} either in the YAML metadata block or as a command-line variable. (There are no other options in beamer and the rest of this section concerns reveal.js slideshows.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For reveal.js, you can instead use the reveal.js-native option {\f1 parallaxBackgroundImage}. You can also set {\f1 parallaxBackgroundHorizontal} and {\f1 parallaxBackgroundVertical} the same way and must also set {\f1 parallaxBackgroundSize} to have your values take effect.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To set an image for a particular reveal.js slide, add {\f1 \{data-background-image="/path/to/image"\}} to the first slide-level heading on the slide (which may even be empty).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In reveal.js\u8217's overview mode, the parallaxBackgroundImage will show up only on the first slide.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Other reveal.js background settings also work on individual slides, including {\f1 data-background-size}, {\f1 data-background-repeat}, {\f1 data-background-color}, {\f1 data-transition}, and {\f1 data-transition-speed}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To add a background image to the automatically generated title slide, use the {\f1 title-slide-attributes} variable in the YAML metadata block. It must contain a map of attribute names and values.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 See the {\field{\*\fldinst{HYPERLINK "https://github.com/hakimel/reveal.js#slide-backgrounds"}}{\fldrslt{\ul
reveal.js documentation
}}}
 for more details.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For example in reveal.js:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ---\line
title: My Slideshow\line
parallaxBackgroundImage: /path/to/my/background_image.png\line
title-slide-attributes:\line
    data-background-image: /path/to/title_image.png\line
    data-background-size: contain\line
---\line
\line
## Slide One\line
\line
Slide 1 has background_image.png as its background.\line
\line
## \{data-background-image="/path/to/special_image.jpg"\}\line
\line
Slide 2 has a special image for its background, even though the heading has no content.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Creating EPUBs with pandoc\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 EPUB Metadata\par}
{\pard \ql \f0 \sa180 \li0 \fi0 EPUB metadata may be specified using the {\f1 --epub-metadata} option, but if the source document is Markdown, it is better to use a {\field{\*\fldinst{HYPERLINK "#extension-yaml_metadata_block"}}{\fldrslt{\ul
YAML metadata block
}}}
. Here is an example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ---\line
title:\line
- type: main\line
  text: My Book\line
- type: subtitle\line
  text: An investigation of metadata\line
creator:\line
- role: author\line
  text: John Smith\line
- role: editor\line
  text: Sarah Jones\line
identifier:\line
- scheme: DOI\line
  text: doi:10.234234.234/33\line
publisher:  My Press\line
rights: \u169? 2007 John Smith, CC BY-NC\line
ibooks:\line
  version: 1.3.4\line
...\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The following fields are recognized:\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 identifier}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 Either a string value or an object with fields {\f1 text} and {\f1 scheme}. Valid values for {\f1 scheme} are {\f1 ISBN-10}, {\f1 GTIN-13}, {\f1 UPC}, {\f1 ISMN-10}, {\f1 DOI}, {\f1 LCCN}, {\f1 GTIN-14}, {\f1 ISBN-13}, {\f1 Legal deposit number}, {\f1 URN}, {\f1 OCLC}, {\f1 ISMN-13}, {\f1 ISBN-A}, {\f1 JP}, {\f1 OLCC}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 title}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 Either a string value, or an object with fields {\f1 file-as} and {\f1 type}, or a list of such objects. Valid values for {\f1 type} are {\f1 main}, {\f1 subtitle}, {\f1 short}, {\f1 collection}, {\f1 edition}, {\f1 extended}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 creator}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 Either a string value, or an object with fields {\f1 role}, {\f1 file-as}, and {\f1 text}, or a list of such objects. Valid values for {\f1 role} are {\field{\*\fldinst{HYPERLINK "https://loc.gov/marc/relators/relaterm.html"}}{\fldrslt{\ul
MARC relators
}}}
, but pandoc will attempt to translate the human-readable versions (like \u8220"author\u8221" and \u8220"editor\u8221") to the appropriate marc relators.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 contributor}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 Same format as {\f1 creator}.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 date}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 A string value in {\f1 YYYY-MM-DD} format. (Only the year is necessary.) Pandoc will attempt to convert other common date formats.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 lang} (or legacy: {\f1 language})\par}
{\pard \ql \f0 \sa0 \li360 \fi0 A string value in {\field{\*\fldinst{HYPERLINK "https://tools.ietf.org/html/bcp47"}}{\fldrslt{\ul
BCP 47
}}}
 format. Pandoc will default to the local language if nothing is specified.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 subject}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 A string value or a list of such values.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 description}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 A string value.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 type}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 A string value.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 format}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 A string value.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 relation}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 A string value.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 coverage}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 A string value.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 rights}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 A string value.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 cover-image}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 A string value (path to cover image).\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 css} (or legacy: {\f1 stylesheet})\par}
{\pard \ql \f0 \sa0 \li360 \fi0 A string value (path to CSS stylesheet).\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 page-progression-direction}\par}
{\pard \ql \f0 \sa0 \li360 \fi0 Either {\f1 ltr} or {\f1 rtl}. Specifies the {\f1 page-progression-direction} attribute for the {\field{\*\fldinst{HYPERLINK "http://idpf.org/epub/301/spec/epub-publications.html#sec-spine-elem"}}{\fldrslt{\ul
{\f1 spine} element
}}}
.\par}
{\pard \ql \f0 \sa0 \li0 \fi0 {\f1 ibooks}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 iBooks-specific metadata, with the following fields:\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 version}: (string)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 specified-fonts}: {\f1 true}|{\f1 false} (default {\f1 false})\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 ipad-orientation-lock}: {\f1 portrait-only}|{\f1 landscape-only}\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 iphone-orientation-lock}: {\f1 portrait-only}|{\f1 landscape-only}\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 binding}: {\f1 true}|{\f1 false} (default {\f1 true})\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\f1 scroll-axis}: {\f1 vertical}|{\f1 horizontal}|{\f1 default}\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 The {\f1 epub:type} attribute\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For {\f1 epub3} output, you can mark up the heading that corresponds to an EPUB chapter using the {\field{\*\fldinst{HYPERLINK "http://www.idpf.org/epub/31/spec/epub-contentdocs.html#sec-epub-type-attribute"}}{\fldrslt{\ul
{\f1 epub:type} attribute
}}}
. For example, to set the attribute to the value {\f1 prologue}, use this markdown:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # My chapter \{epub:type=prologue\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Which will result in:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <body epub:type="frontmatter">\line
  <section epub:type="prologue">\line
    <h1>My chapter</h1>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc will output {\f1 <body epub:type="bodymatter">}, unless you use one of the following values, in which case either {\f1 frontmatter} or {\f1 backmatter} will be output.\par}
{
\trowd \trgaph120
\clbrdrb\brdrs\cellx4320\clbrdrb\brdrs\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 {\f1 epub:type} of first section\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 {\f1 epub:type} of body\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 prologue\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 abstract\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 acknowledgments\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 copyright-page\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 dedication\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 credits\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 keywords\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 imprint\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 contributors\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 other-credits\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 errata\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 revision-history\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 titlepage\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 halftitlepage\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 seriespage\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 foreword\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 preface\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 seriespage\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 titlepage\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 frontmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 appendix\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 backmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 colophon\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 backmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 bibliography\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 backmatter\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 index\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 backmatter\par}
\cell}
}
\intbl\row}
{\pard \ql \f0 \sa180 \li0 \fi0 \par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Linked media\par}
{\pard \ql \f0 \sa180 \li0 \fi0 By default, pandoc will download media referenced from any {\f1 <img>}, {\f1 <audio>}, {\f1 <video>} or {\f1 <source>} element present in the generated EPUB, and include it in the EPUB container, yielding a completely self-contained EPUB. If you want to link to external media resources instead, use raw HTML in your source and add {\f1 data-external="1"} to the tag with the {\f1 src} attribute. For example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <audio controls="1">\line
  <source src="https://example.com/music/toccata.mp3"\line
          data-external="1" type="audio/mpeg">\line
  </source>\line
</audio>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Creating Jupyter notebooks with pandoc\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When creating a {\field{\*\fldinst{HYPERLINK "https://nbformat.readthedocs.io/en/latest/"}}{\fldrslt{\ul
Jupyter notebook
}}}
, pandoc will try to infer the notebook structure. Code blocks with the class {\f1 code} will be taken as code cells, and intervening content will be taken as Markdown cells. Attachments will automatically be created for images in Markdown cells. Metadata will be taken from the {\f1 jupyter} metadata field. For example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ---\line
title: My notebook\line
jupyter:\line
  nbformat: 4\line
  nbformat_minor: 5\line
  kernelspec:\line
     display_name: Python 2\line
     language: python\line
     name: python2\line
  language_info:\line
     codemirror_mode:\line
       name: ipython\line
       version: 2\line
     file_extension: ".py"\line
     mimetype: "text/x-python"\line
     name: "python"\line
     nbconvert_exporter: "python"\line
     pygments_lexer: "ipython2"\line
     version: "2.7.15"\line
---\line
\line
# Lorem ipsum\line
\line
**Lorem ipsum** dolor sit amet, consectetur adipiscing elit. Nunc luctus\line
bibendum felis dictum sodales.\line
\line
``` code\line
print("hello")\line
```\line
\line
## Pyout\line
\line
``` code\line
from IPython.display import HTML\line
HTML("""\line
<script>\line
console.log("hello");\line
</script>\line
<b>HTML</b>\line
""")\line
```\line
\line
## Image\line
\line
This image ![image](myimage.png) will be\line
included as a cell attachment.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you want to add cell attributes, group cells differently, or add output to code cells, then you need to include divs to indicate the structure. You can use either {\field{\*\fldinst{HYPERLINK "#extension-fenced_divs"}}{\fldrslt{\ul
fenced divs
}}}
 or {\field{\*\fldinst{HYPERLINK "#extension-native_divs"}}{\fldrslt{\ul
native divs
}}}
 for this. Here is an example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 :::::: \{.cell .markdown\}\line
# Lorem\line
\line
**Lorem ipsum** dolor sit amet, consectetur adipiscing elit. Nunc luctus\line
bibendum felis dictum sodales.\line
::::::\line
\line
:::::: \{.cell .code execution_count=1\}\line
``` \{.python\}\line
print("hello")\line
```\line
\line
::: \{.output .stream .stdout\}\line
```\line
hello\line
```\line
:::\line
::::::\line
\line
:::::: \{.cell .code execution_count=2\}\line
``` \{.python\}\line
from IPython.display import HTML\line
HTML("""\line
<script>\line
console.log("hello");\line
</script>\line
<b>HTML</b>\line
""")\line
```\line
\line
::: \{.output .execute_result execution_count=2\}\line
```\{=html\}\line
<script>\line
console.log("hello");\line
</script>\line
<b>HTML</b>\line
hello\line
```\line
:::\line
::::::\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you include raw HTML or TeX in an output cell, use the [raw attribute][Extension: {\f1 fenced_attribute}], as shown in the last cell of the example above. Although pandoc can process \u8220"bare\u8221" raw HTML and TeX, the result is often interspersed raw elements and normal textual elements, and in an output cell pandoc expects a single, connected raw block. To avoid using raw HTML or TeX except when marked explicitly using raw attributes, we recommend specifying the extensions {\f1 -raw_html-raw_tex+raw_attribute} when translating between Markdown and ipynb notebooks.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that options and extensions that affect reading and writing of Markdown will also affect Markdown cells in ipynb notebooks. For example, {\f1 --wrap=preserve} will preserve soft line breaks in Markdown cells; {\f1 --atx-headers} will cause ATX-style headings to be used; and {\f1 --preserve-tabs} will prevent tabs from being turned to spaces.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Syntax highlighting\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc will automatically highlight syntax in {\field{\*\fldinst{HYPERLINK "#fenced-code-blocks"}}{\fldrslt{\ul
fenced code blocks
}}}
 that are marked with a language name. The Haskell library {\field{\*\fldinst{HYPERLINK "https://github.com/jgm/skylighting"}}{\fldrslt{\ul
skylighting
}}}
 is used for highlighting. Currently highlighting is supported only for HTML, EPUB, Docx, Ms, and LaTeX/PDF output. To see a list of language names that pandoc will recognize, type {\f1 pandoc --list-highlight-languages}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The color scheme can be selected using the {\f1 --highlight-style} option. The default color scheme is {\f1 pygments}, which imitates the default color scheme used by the Python library pygments (though pygments is not actually used to do the highlighting). To see a list of highlight styles, type {\f1 pandoc --list-highlight-styles}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you are not satisfied with the predefined styles, you can use {\f1 --print-highlight-style} to generate a JSON {\f1 .theme} file which can be modified and used as the argument to {\f1 --highlight-style}. To get a JSON version of the {\f1 pygments} style, for example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc --print-highlight-style pygments > my.theme\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Then edit {\f1 my.theme} and use it like this:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc --highlight-style my.theme\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you are not satisfied with the built-in highlighting, or you want highlight a language that isn\u8217't supported, you can use the {\f1 --syntax-definition} option to load a {\field{\*\fldinst{HYPERLINK "https://docs.kde.org/stable5/en/applications/katepart/highlight.html"}}{\fldrslt{\ul
KDE-style XML syntax definition file
}}}
. Before writing your own, have a look at KDE\u8217's {\field{\*\fldinst{HYPERLINK "https://github.com/KDE/syntax-highlighting/tree/master/data/syntax"}}{\fldrslt{\ul
repository of syntax definitions
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To disable highlighting, use the {\f1 --no-highlight} option.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Custom Styles\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Custom styles can be used in the docx and ICML formats.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Output\par}
{\pard \ql \f0 \sa180 \li0 \fi0 By default, pandoc\u8217's docx and ICML output applies a predefined set of styles for blocks such as paragraphs and block quotes, and uses largely default formatting (italics, bold) for inlines. This will work for most purposes, especially alongside a {\f1 reference.docx} file. However, if you need to apply your own styles to blocks, or match a preexisting set of styles, pandoc allows you to define custom styles for blocks and text using {\f1 div}s and {\f1 span}s, respectively.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you define a {\f1 div} or {\f1 span} with the attribute {\f1 custom-style}, pandoc will apply your specified style to the contained elements (with the exception of elements whose function depends on a style, like headings, code blocks, block quotes, or links). So, for example, using the {\f1 bracketed_spans} syntax,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [Get out]\{custom-style="Emphatically"\}, he said.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 would produce a docx file with \u8220"Get out\u8221" styled with character style {\f1 Emphatically}. Similarly, using the {\f1 fenced_divs} syntax,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Dickinson starts the poem simply:\line
\line
::: \{custom-style="Poetry"\}\line
| A Bird came down the Walk---\line
| He did not know I saw---\line
:::\par}
{\pard \ql \f0 \sa180 \li0 \fi0 would style the two contained lines with the {\f1 Poetry} paragraph style.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For docx output, styles will be defined in the output file as inheriting from normal text, if the styles are not yet in your reference.docx. If they are already defined, pandoc will not alter the definition.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This feature allows for greatest customization in conjunction with {\field{\*\fldinst{HYPERLINK "https://pandoc.org/filters.html"}}{\fldrslt{\ul
pandoc filters
}}}
. If you want all paragraphs after block quotes to be indented, you can write a filter to apply the styles necessary. If you want all italics to be transformed to the {\f1 Emphasis} character style (perhaps to change their color), you can write a filter which will transform all italicized inlines to inlines within an {\f1 Emphasis} custom-style {\f1 span}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For docx output, you don\u8217't need to enable any extensions for custom styles to work.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Input\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The docx reader, by default, only reads those styles that it can convert into pandoc elements, either by direct conversion or interpreting the derivation of the input document\u8217's styles.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 By enabling the {\field{\*\fldinst{HYPERLINK "#ext-styles"}}{\fldrslt{\ul
{\f1 styles} extension
}}}
 in the docx reader ({\f1 -f docx+styles}), you can produce output that maintains the styles of the input document, using the {\f1 custom-style} class. Paragraph styles are interpreted as divs, while character styles are interpreted as spans.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For example, using the {\f1 custom-style-reference.docx} file in the test directory, we have the following different outputs:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Without the {\f1 +styles} extension:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $ pandoc test/docx/custom-style-reference.docx -f docx -t markdown\line
This is some text.\line
\line
This is text with an *emphasized* text style. And this is text with a\line
**strengthened** text style.\line
\line
> Here is a styled paragraph that inherits from Block Text.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 And with the extension:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $ pandoc test/docx/custom-style-reference.docx -f docx+styles -t markdown\line
\line
::: \{custom-style="First Paragraph"\}\line
This is some text.\line
:::\line
\line
::: \{custom-style="Body Text"\}\line
This is text with an [emphasized]\{custom-style="Emphatic"\} text style.\line
And this is text with a [strengthened]\{custom-style="Strengthened"\}\line
text style.\line
:::\line
\line
::: \{custom-style="My Block Style"\}\line
> Here is a styled paragraph that inherits from Block Text.\line
:::\par}
{\pard \ql \f0 \sa180 \li0 \fi0 With these custom styles, you can use your input document as a reference-doc while creating docx output (see below), and maintain the same styles in your input and output files.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Custom writers\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Pandoc can be extended with custom writers written in {\field{\*\fldinst{HYPERLINK "https://www.lua.org"}}{\fldrslt{\ul
Lua
}}}
. (Pandoc includes a Lua interpreter, so Lua need not be installed separately.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To use a custom writer, simply specify the path to the Lua script in place of the output format. For example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc -t data/sample.lua\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Creating a custom writer requires writing a Lua function for each possible element in a pandoc document. To get a documented example which you can modify according to your needs, do\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 pandoc --print-default-data-file sample.lua\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that custom writers have no default template. If you want to use {\f1 --standalone} with a custom writer, you will need to specify a template manually using {\f1 --template} or add a new default template with the name {\f1 default.NAME_OF_CUSTOM_WRITER.lua} to the {\f1 templates} subdirectory of your user data directory (see {\field{\*\fldinst{HYPERLINK "#templates"}}{\fldrslt{\ul
Templates
}}}
).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 A note on security\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you use pandoc to convert user-contributed content in a web application, here are some things to keep in mind:\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab Although pandoc itself will not create or modify any files other than those you explicitly ask it create (with the exception of temporary files used in producing PDFs), a filter or custom writer could in principle do anything on your file system. Please audit filters and custom writers very carefully before using them.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab If your application uses pandoc as a Haskell library (rather than shelling out to the executable), it is possible to use it in a mode that fully isolates pandoc from your file system, by running the pandoc operations in the {\f1 PandocPure} monad. See the document {\field{\*\fldinst{HYPERLINK "https://pandoc.org/using-the-pandoc-api.html"}}{\fldrslt{\ul
Using the pandoc API
}}}
 for more details.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab Pandoc\u8217's parsers can exhibit pathological performance on some corner cases. It is wise to put any pandoc operations under a timeout, to avoid DOS attacks that exploit these issues. If you are using the pandoc executable, you can add the command line options {\f1 +RTS -M512M -RTS} (for example) to limit the heap size to 512MB.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 4.\tx360\tab The HTML generated by pandoc is not guaranteed to be safe. If {\f1 raw_html} is enabled for the Markdown input, users can inject arbitrary HTML. Even if {\f1 raw_html} is disabled, users can include dangerous content in attributes for headings, spans, and code blocks. To be safe, you should run all the generated HTML through an HTML sanitizer.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Authors\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Copyright 2006\u8211-2019 John MacFarlane (jgm@berkeley.edu). Released under the {\field{\*\fldinst{HYPERLINK "https://www.gnu.org/copyleft/gpl.html"}}{\fldrslt{\ul
GPL
}}}
, version 2 or greater. This software carries no warranty of any kind. (See COPYRIGHT for full copyright and warranty notices.) For a full list of contributors, see the file AUTHORS.md in the pandoc source code.\par}
}
